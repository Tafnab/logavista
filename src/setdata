config/ksystemlog.kcfg:<?xml version="1.0" encoding="UTF-8"?>
config/ksystemlog.kcfg:	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
config/ksystemlog.kcfg:        <!-- <include>klocale.h</include> -->
config/ksystemlog.kcfg:                        <!-- <default>KLocale::ShortDate</default> -->
config/ksystemlog.kcfg:			<!--
config/ksystemlog.kcfg:			-->
config/ksystemlog.kcfg:		<!--
config/ksystemlog.kcfg:		-->
config/dummyConfig.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
configurationDialog.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
configurationDialog.cpp:    d->changed = false;
configurationDialog.cpp:        if (logMode->logModeConfigurationWidget() == NULL) {
configurationDialog.cpp:        if (d->logModeConfigurations.contains(logMode->logModeConfigurationWidget()) == true) {
configurationDialog.cpp:        d->logModeConfigurations.append(logMode->logModeConfigurationWidget());
configurationDialog.cpp:    foreach (LogModeConfigurationWidget *logModeConfigurationWidget, d->logModeConfigurations) {
configurationDialog.cpp:        logDebug() << "Adding " << logModeConfigurationWidget->itemName() << " configuration...";
configurationDialog.cpp:        addPage(logModeConfigurationWidget, logModeConfigurationWidget->itemName(),
configurationDialog.cpp:                logModeConfigurationWidget->iconName(), logModeConfigurationWidget->header(), false);
configurationDialog.cpp:    d->generalConfiguration = new GeneralConfigurationWidget();
configurationDialog.cpp:    addPage(d->generalConfiguration, i18n("General"), QStringLiteral("applications-system"), i18n("General"),
configurationDialog.cpp:    connect(d->generalConfiguration, &GeneralConfigurationWidget::configurationChanged, this, &ConfigurationDialog::updateConfiguration);
configurationDialog.cpp:    d->changed = false;
configurationDialog.cpp:    d->generalConfiguration->saveConfig();
configurationDialog.cpp:    foreach (LogModeConfigurationWidget *logModeConfigurationWidget, d->logModeConfigurations) {
configurationDialog.cpp:        logModeConfigurationWidget->saveConfig();
configurationDialog.cpp:    KSystemLogConfig::self()->save();
configurationDialog.cpp:    logDebug() << "Current change status : " << d->changed;
configurationDialog.cpp:    return d->changed;
configurationDialog.cpp:    bool valid = d->generalConfiguration->isValid();
configurationDialog.cpp:        foreach (LogModeConfigurationWidget *logModeConfigurationWidget, d->logModeConfigurations) {
configurationDialog.cpp:            if (logModeConfigurationWidget->isValid() == false) {
configurationDialog.cpp:        buttonBox()->button(QDialogButtonBox::Ok)->setEnabled(true);
configurationDialog.cpp:        buttonBox()->button(QDialogButtonBox::Ok)->setEnabled(false);
configurationDialog.cpp:        buttonBox()->button(QDialogButtonBox::Apply)->setEnabled(false);
configurationDialog.cpp:    d->changed = true;
configurationDialog.cpp:    d->generalConfiguration->readConfig();
configurationDialog.cpp:    foreach (LogModeConfigurationWidget *logModeConfigurationWidget, d->logModeConfigurations) {
configurationDialog.cpp:        logModeConfigurationWidget->readConfig();
configurationDialog.cpp:    d->changed = false;
configurationDialog.cpp:    d->generalConfiguration->defaultConfig();
configurationDialog.cpp:    foreach (LogModeConfigurationWidget *logModeConfigurationWidget, d->logModeConfigurations) {
configurationDialog.cpp:        logModeConfigurationWidget->defaultConfig();
configurationDialog.cpp:    d->changed = false;
configurationDialog.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
detailDialog.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
detailDialog.cpp:    previous->setText(i18n("&Previous"));
detailDialog.cpp:    previous->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/up.svg")));
detailDialog.cpp:    next->setText(i18n("&Next"));
detailDialog.cpp:    next->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/down.svg")));
detailDialog.cpp:    this->logViewWidget = logViewWidget;
detailDialog.cpp:    // Get the current-last item selected
detailDialog.cpp:    LogViewWidgetItem *item = logViewWidget->lastSelectedItem();
detailDialog.cpp:    icon->setPixmap(DesktopIcon(item->logLine()->logLevel()->icon()));
detailDialog.cpp:    header->setText(item->logLine()->formattedText());
detailDialog.cpp:    message->setText(item->logLine()->logItems().last());
detailDialog.cpp:    if (logViewWidget->topLevelItem(logViewWidget->indexOfTopLevelItem(item) - 1) == NULL)
detailDialog.cpp:        previous->setEnabled(false);
detailDialog.cpp:        previous->setEnabled(true);
detailDialog.cpp:    if (logViewWidget->topLevelItem(logViewWidget->indexOfTopLevelItem(item) + 1) == NULL)
detailDialog.cpp:        next->setEnabled(false);
detailDialog.cpp:        next->setEnabled(true);
detailDialog.cpp:    header->adjustSize();
detailDialog.cpp:    this->adjustSize();
detailDialog.cpp:    // Get the current-last item selected
detailDialog.cpp:    LogViewWidgetItem *item = logViewWidget->lastSelectedItem();
detailDialog.cpp:        = logViewWidget->topLevelItem(logViewWidget->indexOfTopLevelItem(item) + direction);
detailDialog.cpp:    logViewWidget->setItemSelected(item, false);
detailDialog.cpp:    logViewWidget->setItemSelected(destinationItem, true);
detailDialog.cpp:    logViewWidget->scrollToItem(destinationItem);
detailDialog.cpp:    moveToItem(-1);
detailDialog.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
generalConfigurationWidgetBase.ui:<?xml version="1.0" encoding="UTF-8"?>
generalConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
generalConfigurationWidget.cpp:    d->warningBox = new KMessageWidget(this);
generalConfigurationWidget.cpp:    d->warningBox->setVisible(false);
generalConfigurationWidget.cpp:    d->warningBox->setMessageType(KMessageWidget::Warning);
generalConfigurationWidget.cpp:    d->warningBox->setText(i18n("This mode is unavailable because its log files do not exist."));
generalConfigurationWidget.cpp:    d->warningBox->setCloseButtonVisible(false);
generalConfigurationWidget.cpp:    d->warningBox->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/warning.svg")));
generalConfigurationWidget.cpp:    startupModeVerticalLayout->addWidget(d->warningBox);
generalConfigurationWidget.cpp:    startupLogMode->addItem(QIcon::fromTheme(QStringLiteral(NO_MODE_ICON)), i18n("No Log Mode"),
generalConfigurationWidget.cpp:        if (logMode->id() == QLatin1String("openLogMode"))
generalConfigurationWidget.cpp:        startupLogMode->addItem(QIcon(logMode->icon()), logMode->name(), QVariant(logMode->id()));
generalConfigurationWidget.cpp:    d->dateFormatGroup = new QButtonGroup(this);
generalConfigurationWidget.cpp:    d->dateFormatGroup->addButton(formatLongDate, Globals::LongFormat);
generalConfigurationWidget.cpp:    d->dateFormatGroup->addButton(formatShortDate, Globals::ShortFormat);
generalConfigurationWidget.cpp:    d->dateFormatGroup->addButton(formatPreciseDate, Globals::PreciseFormat);
generalConfigurationWidget.cpp:    connect(d->dateFormatGroup, SIGNAL(buttonClicked(int)), this, SIGNAL(configurationChanged()));
generalConfigurationWidget.cpp:    foreach (QAbstractButton *button, d->dateFormatGroup->buttons()) {
generalConfigurationWidget.cpp:        Globals::DateFormat currentButtonFormat = (Globals::DateFormat)d->dateFormatGroup->id(button);
generalConfigurationWidget.cpp:        button->setText(i18nc("Date format option (date example)", "%1 (%2)", button->text(), formattedDate));
generalConfigurationWidget.cpp:    for (int i = 0; i < startupLogMode->count(); ++i) {
generalConfigurationWidget.cpp:        if (KSystemLogConfig::startupLogMode() == startupLogMode->itemData(i)) {
generalConfigurationWidget.cpp:            startupLogMode->setCurrentIndex(i);
generalConfigurationWidget.cpp:    maxLines->setValue(KSystemLogConfig::maxLines());
generalConfigurationWidget.cpp:    deleteDuplicatedLines->setChecked(KSystemLogConfig::deleteDuplicatedLines());
generalConfigurationWidget.cpp:    deleteProcessId->setChecked(KSystemLogConfig::deleteProcessIdentifier());
generalConfigurationWidget.cpp:    colorizeLogLines->setChecked(KSystemLogConfig::colorizeLogLines());
generalConfigurationWidget.cpp:    QAbstractButton *selectedButton = d->dateFormatGroup->button(dateFormat);
generalConfigurationWidget.cpp:    selectedButton->setChecked(true);
generalConfigurationWidget.cpp:    KSystemLogConfig::setStartupLogMode(startupLogMode->itemData(startupLogMode->currentIndex()).toString());
generalConfigurationWidget.cpp:    KSystemLogConfig::setMaxLines(maxLines->value());
generalConfigurationWidget.cpp:    KSystemLogConfig::setDeleteDuplicatedLines(deleteDuplicatedLines->isChecked());
generalConfigurationWidget.cpp:    KSystemLogConfig::setDeleteProcessIdentifier(deleteProcessId->isChecked());
generalConfigurationWidget.cpp:    KSystemLogConfig::setColorizeLogLines(colorizeLogLines->isChecked());
generalConfigurationWidget.cpp:    KSystemLogConfig::setDateFormat(d->dateFormatGroup->checkedId());
generalConfigurationWidget.cpp:    if (maxLines->value() > 0) {
generalConfigurationWidget.cpp:        QVariant modeID = startupLogMode->currentData();
generalConfigurationWidget.cpp:                if (!mode->filesExist()) {
generalConfigurationWidget.cpp:                    logDebug() << "Log files are missing for mode" << mode->name();
generalConfigurationWidget.cpp:                    d->warningBox->setVisible(true);
generalConfigurationWidget.cpp:                    d->warningBox->setVisible(false);
generalConfigurationWidget.cpp:                d->warningBox->setVisible(false);
generalConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
ksystemlogui.rc:      <!--
ksystemlogui.rc:      -->
lib/logViewWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewWidget.cpp:    d->logViewModel = new LogViewModel(this);
lib/logViewWidget.cpp:    d->headersTogglingActions = new QActionGroup(this);
lib/logViewWidget.cpp:    d->headersTogglingActions->setExclusive(false);
lib/logViewWidget.cpp:    connect(d->headersTogglingActions, &QActionGroup::triggered, this, &LogViewWidget::toggleHeader);
lib/logViewWidget.cpp:    header()->setContextMenuPolicy(Qt::ActionsContextMenu);
lib/logViewWidget.cpp:    // header()->setMovable(true);
lib/logViewWidget.cpp:    header()->setSectionsMovable(true);
lib/logViewWidget.cpp:    delete d->logViewModel;
lib/logViewWidget.cpp:    QListIterator<QAction *> it(d->headersTogglingActions->actions());
lib/logViewWidget.cpp:        header()->removeAction(action);
lib/logViewWidget.cpp:        d->headersTogglingActions->removeAction(action);
lib/logViewWidget.cpp:        action->setText(column.columnName());
lib/logViewWidget.cpp:        // helloAction->setIcon(QIcon::fromTheme( QLatin1String( "media-playback-start" )));
lib/logViewWidget.cpp:        // helloAction->setShortcut(Qt::CTRL + Qt::Key_M);
lib/logViewWidget.cpp:        action->setCheckable(true);
lib/logViewWidget.cpp:        action->setChecked(true);
lib/logViewWidget.cpp:        action->setToolTip(i18n("Display/Hide the '%1' column", column.columnName()));
lib/logViewWidget.cpp:        action->setData(QVariant(columnIndex));
lib/logViewWidget.cpp:        d->headersTogglingActions->addAction(action);
lib/logViewWidget.cpp:    header()->addActions(d->headersTogglingActions->actions());
lib/logViewWidget.cpp:    for (int i = 0; i < columnCount() - 1; ++i) {
lib/logViewWidget.cpp:        logLines.append(item->logLine());
lib/logViewWidget.cpp:        if (newestItem == NULL || newestItem->logLine()->isOlderThan(*(item->logLine()))) {
lib/logViewWidget.cpp:        if (item->logLine()->equals(*searchedLogLine))
lib/logViewWidget.cpp:    return d->logViewModel;
lib/logViewWidget.cpp:        item->toggleToolTip(enabled);
lib/logViewWidget.cpp:    int columnIndex = action->data().toInt();
lib/logViewWidget.cpp:    if (header()->isSectionHidden(columnIndex) == true)
lib/logViewWidget.cpp:        header()->setSectionHidden(columnIndex, false);
lib/logViewWidget.cpp:        header()->setSectionHidden(columnIndex, true);
lib/logModeConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logMode.h:// TODO Do not let this class visible to other classes (except sub-classes)
lib/logViewExport.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewExport.cpp:    body += i18n("---------------------------------------\n");
lib/logViewExport.cpp:        body += item->logLine()->exportToText();
lib/logViewExport.cpp:    body += i18n("---------------------------------------\n");
lib/logViewExport.cpp:    // Lines of my problem"), body, QLatin1String( "" ), QStringList(), kapp->startupId());
lib/logViewExport.cpp:    if (printDialog->exec() == false) {
lib/logViewExport.cpp:    int dpiy = painterDevice->logicalDpiY();
lib/logViewExport.cpp:    QRect printView(margin, margin, painterDevice->width() - 2 * margin,
lib/logViewExport.cpp:                    painterDevice->height() - 2 * margin);
lib/logViewExport.cpp:        QString body = item->logLine()->exportToText();
lib/logViewExport.cpp:    painter.translate(0, -movement);
lib/logViewExport.cpp:    painter.translate(0, -printView.height());
lib/logViewExport.cpp:    painter.drawText(printView.right() - painter.fontMetrics().width(QString::number(page)),
lib/logViewExport.cpp:        text.append(item->logLine()->exportToText());
lib/logViewExport.cpp:        // Copy both to clipboard and X11-selection
lib/logViewExport.cpp:        QApplication::clipboard()->setText(text, QClipboard::Clipboard);
lib/logViewExport.cpp:        QApplication::clipboard()->setText(text, QClipboard::Selection);
lib/logViewExport.cpp:    if (ioDev->open(QIODevice::WriteOnly)) {
lib/logViewExport.cpp:            stream << item->logLine()->exportToText() << '\n';
lib/logViewExport.cpp:        ioDev->close();
lib/fileAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/fileAnalyzer.cpp:        logFileReader->watchFile(enabled);
lib/fileAnalyzer.cpp:        logDebug() << "Remove file : " << logFileReader->logFile().url().path();
lib/fileAnalyzer.cpp:    QString filePath = logFileReader->logFile().url().path();
lib/fileAnalyzer.cpp:    logViewModel->startingMultipleInsertions();
lib/fileAnalyzer.cpp:        insertedLogLineCount = insertLines(content, logFileReader->logFile(), Analyzer::UpdatingRead);
lib/fileAnalyzer.cpp:        emit readFileStarted(*logMode, logFileReader->logFile(),
lib/fileAnalyzer.cpp:                             logFileReaders.count() - logFileReaders.indexOf(logFileReader),
lib/fileAnalyzer.cpp:        insertedLogLineCount = insertLines(content, logFileReader->logFile(), Analyzer::FullRead);
lib/fileAnalyzer.cpp:    logViewModel->endingMultipleInsertions(readingMode, insertedLogLineCount);
lib/fileAnalyzer.cpp:            stop = bufferedLines.size() - KSystemLogConfig::maxLines();
lib/fileAnalyzer.cpp:            informOpeningProgress(currentPosition, (bufferedLines.size() - 1) - stop);
lib/fileAnalyzer.cpp:    logDebug() << "Total read lines :" << (bufferedLines.size() - stop) << "(" << logFile.url().path() << ")";
lib/fileAnalyzer.cpp:    previousDate = line->time(); // saving the actual line data so I can see the previous line to steal date, global var
lib/fileAnalyzer.cpp:        line->setRecent(false);
lib/fileAnalyzer.cpp:    return logViewModel->insertNewLogLine(line);
lib/logModeConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/localLogFileReader.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/localLogFileReader.cpp:    delete d->watch;
lib/localLogFileReader.cpp:    d->watch = new KDirWatch();
lib/localLogFileReader.cpp:    connect(d->watch, &KDirWatch::dirty, this, &LocalLogFileReader::logFileModified);
lib/localLogFileReader.cpp:    d->previousFilePosition = 0;
lib/localLogFileReader.cpp:    logDebug() << "Reading local file " << d->logFile.url().path();
lib/localLogFileReader.cpp:    QString filePath = d->logFile.url().path();
lib/localLogFileReader.cpp:        if (d->watch->contains(filePath) == false) {
lib/localLogFileReader.cpp:            d->watch->addFile(filePath);
lib/localLogFileReader.cpp:        d->previousFilePosition = 0;
lib/localLogFileReader.cpp:        d->watch->removeFile(filePath);
lib/localLogFileReader.cpp:    QString filePath = d->logFile.url().path();
lib/localLogFileReader.cpp:    if (d->logFile.url().isValid() == false) {
lib/localLogFileReader.cpp:    if (!file->exists()) {
lib/localLogFileReader.cpp:    if (mimeType == QLatin1String("text/plain") || mimeType == QLatin1String("application/octet-stream")) {
lib/localLogFileReader.cpp:    if (!inputDevice->open(QIODevice::ReadOnly)) {
lib/localLogFileReader.cpp:    inputDevice->close();
lib/localLogFileReader.cpp:    d->previousFilePosition = inputDevice->size();
lib/localLogFileReader.cpp:    logDebug() << "New file position : " << d->previousFilePosition << " (" << d->logFile.url().path() << ")"
lib/localLogFileReader.cpp:    if (d->insertionLocking.tryLock() == false) {
lib/localLogFileReader.cpp:        logCritical() << "Could not open file " << d->logFile.url().path();
lib/localLogFileReader.cpp:    if (d->previousFilePosition != 0 && d->previousFilePosition <= inputDevice->size()) {
lib/localLogFileReader.cpp:        logDebug() << "Reading from position " << d->previousFilePosition << " (" << d->logFile.url().path()
lib/localLogFileReader.cpp:        if (inputDevice->isSequential()) {
lib/localLogFileReader.cpp:            inputDevice->seek(d->previousFilePosition);
lib/localLogFileReader.cpp:        logDebug() << "New file or file truncated. (Re-)Loading log file";
lib/localLogFileReader.cpp:    d->insertionLocking.unlock();
lib/levelPrintPage.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLine.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeAction.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeAction.cpp:    d->inToolBar = true;
lib/logModeAction.cpp:    d->category = LogModeAction::RootCategory;
lib/logModeAction.cpp:    d->category = category;
lib/logModeAction.cpp:    return d->category;
lib/analyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/view.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/view.cpp:    d->logViewWidget = NULL;
lib/view.cpp:    topLayout->setMargin(2);
lib/view.cpp:    topLayout->setSpacing(2);
lib/view.cpp:    this->setLayout(topLayout);
lib/view.cpp:    d->logViewFilterWidget = new LogViewFilterWidget();
lib/view.cpp:    connect(d->logViewFilterWidget->filterLine(), &LogViewWidgetSearchLine::treeWidgetUpdated, this,
lib/view.cpp:    connect(d->logViewFilterWidget->filterLine(), &LogViewWidgetSearchLine::treeWidgetUpdated, this,
lib/view.cpp:    d->logViewFilterWidget->setVisible(KSystemLogConfig::toggleFilterBar());
lib/view.cpp:    topLayout->addWidget(d->logViewFilterWidget);
lib/view.cpp:    d->logViewWidget = new LogViewWidget(this);
lib/view.cpp:    connect(d->logViewWidget, &LogViewWidget::columnsChanged, d->logViewFilterWidget,
lib/view.cpp:    d->logViewFilterWidget->filterLine()->setTreeWidget(d->logViewWidget);
lib/view.cpp:    topLayout->addWidget(d->logViewWidget);
lib/view.cpp:    d->logViewSearchWidget = new LogViewSearchWidget();
lib/view.cpp:    d->logViewSearchWidget->setTreeWidget(d->logViewWidget);
lib/view.cpp:    d->logViewSearchWidget->hide();
lib/view.cpp:    topLayout->addWidget(d->logViewSearchWidget);
lib/view.cpp:    d->loadingBar = new LoadingBar();
lib/view.cpp:    connect(d->loadingBar, &LoadingBar::displayed, this, &View::displayLoadingBar);
lib/view.cpp:    topLayout->addWidget(d->loadingBar);
lib/view.cpp:    d->loadingBar->hide();
lib/view.cpp:    return d->logViewWidget;
lib/view.cpp:    return d->loadingBar;
lib/view.cpp:        d->logViewWidget->hide();
lib/view.cpp:        d->logViewSearchWidget->hide();
lib/view.cpp:        d->logViewFilterWidget->hide();
lib/view.cpp:        d->loadingBar->show();
lib/view.cpp:        d->logViewWidget->show();
lib/view.cpp:        d->logViewFilterWidget->setVisible(KSystemLogConfig::toggleFilterBar());
lib/view.cpp:        d->logViewFilterWidget->filterLine()->updateSearch();
lib/view.cpp:        d->loadingBar->hide();
lib/view.cpp:        d->logViewFilterWidget->show();
lib/view.cpp:        d->logViewFilterWidget->filterLine()->clear();
lib/view.cpp:        d->logViewFilterWidget->hide();
lib/view.cpp:        d->logViewSearchWidget->displaySearch();
lib/view.cpp:        d->logViewSearchWidget->hide();
lib/view.cpp:    return d->logViewSearchWidget;
lib/view.cpp:    QTreeWidgetItemIterator it(d->logViewWidget, QTreeWidgetItemIterator::Selected);
lib/view.cpp:        if (item->isHidden()) {
lib/view.cpp:            item->setSelected(false);
lib/view.cpp:    QList<QUrl> urls = event->mimeData()->urls();
lib/view.cpp:    QList<QUrl> urls = event->mimeData()->urls();
lib/view.cpp:    event->acceptProposedAction();
lib/logging.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logging.h: * - logDebug()
lib/logging.h: * - logWarning()
lib/logging.h: * - logCritical()
lib/logging.h: * - logFatal()
lib/processOutputLogFileReader.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/processOutputLogFileReader.cpp:    d->previousLinesCount = 0;
lib/processOutputLogFileReader.cpp:    d->availableStandardOutput.clear();
lib/processOutputLogFileReader.cpp:    d->process = NULL;
lib/processOutputLogFileReader.cpp:    d->processUpdater.setInterval(PROCESS_OUTPUT_UPDATER_INTERVAL);
lib/processOutputLogFileReader.cpp:    connect(&(d->processUpdater), &QTimer::timeout, this, &ProcessOutputLogFileReader::startProcess);
lib/processOutputLogFileReader.cpp:    logDebug() << "Using process name " << d->logFile.url().path();
lib/processOutputLogFileReader.cpp:        logDebug() << "Monitoring process : " << d->logFile.url().path();
lib/processOutputLogFileReader.cpp:        d->previousLinesCount = 0;
lib/processOutputLogFileReader.cpp:        d->processUpdater.start();
lib/processOutputLogFileReader.cpp:        d->processUpdater.stop();
lib/processOutputLogFileReader.cpp:    if (d->logFile.url().isValid() == false) {
lib/processOutputLogFileReader.cpp:    d->process = new QProcess();
lib/processOutputLogFileReader.cpp:    connect(d->process, &QProcess::readyReadStandardOutput, this, &ProcessOutputLogFileReader::logFileModified);
lib/processOutputLogFileReader.cpp:    connect(d->process, SIGNAL(finished(int, QProcess::ExitStatus)), this,
lib/processOutputLogFileReader.cpp:    d->process->start(d->logFile.url().path(), QIODevice::ReadOnly | QIODevice::Text);
lib/processOutputLogFileReader.cpp:    d->process->waitForStarted();
lib/processOutputLogFileReader.cpp:    d->previousLinesCount = d->availableStandardOutput.count();
lib/processOutputLogFileReader.cpp:    logDebug() << "New lines count : " << d->previousLinesCount << " (" << d->logFile.url().path() << ")"
lib/processOutputLogFileReader.cpp:    d->availableStandardOutput.clear();
lib/processOutputLogFileReader.cpp:    if (d->process) {
lib/processOutputLogFileReader.cpp:        d->process->close();
lib/processOutputLogFileReader.cpp:        delete d->process;
lib/processOutputLogFileReader.cpp:        d->process = NULL;
lib/processOutputLogFileReader.cpp:    logDebug() << "Process terminated" << d->previousLinesCount << "previously /"
lib/processOutputLogFileReader.cpp:               << d->availableStandardOutput.count() << "currently";
lib/processOutputLogFileReader.cpp:        QString message(i18n("The process '%1' crashed.", d->logFile.url().path()));
lib/processOutputLogFileReader.cpp:    if (d->previousLinesCount == d->availableStandardOutput.count()) {
lib/processOutputLogFileReader.cpp:    else if (d->previousLinesCount != 0 && d->previousLinesCount <= d->availableStandardOutput.count()) {
lib/processOutputLogFileReader.cpp:        logDebug() << "Reading from line " << d->previousLinesCount << " (" << d->logFile.url().path() << ")";
lib/processOutputLogFileReader.cpp:        int index = d->previousLinesCount - 1;
lib/processOutputLogFileReader.cpp:        while (index < d->availableStandardOutput.count()) {
lib/processOutputLogFileReader.cpp:            newOutputs.append(d->availableStandardOutput.at(index));
lib/processOutputLogFileReader.cpp:        emit contentChanged(this, Analyzer::FullRead, d->availableStandardOutput);
lib/processOutputLogFileReader.cpp:    QByteArray bytesOutput = d->process->readAllStandardOutput();
lib/processOutputLogFileReader.cpp:    d->buffer.append(QLatin1String(bytesOutput));
lib/processOutputLogFileReader.cpp:    int endLinePos = d->buffer.indexOf(QLatin1String("\n"));
lib/processOutputLogFileReader.cpp:        if (endLinePos == -1)
lib/processOutputLogFileReader.cpp:        d->availableStandardOutput.append(d->buffer.left(endLinePos));
lib/processOutputLogFileReader.cpp:        d->buffer.remove(0, endLinePos + 1);
lib/processOutputLogFileReader.cpp:        endLinePos = d->buffer.indexOf(QLatin1String("\n"));
lib/processOutputLogFileReader.cpp:    logDebug() << "Received a total of" << d->availableStandardOutput.count() << "new lines";
lib/processOutputLogFileReader.cpp:    if (d->buffer.isEmpty() == false) {
lib/processOutputLogFileReader.cpp:        d->availableStandardOutput.append(d->buffer);
lib/processOutputLogFileReader.cpp:        d->buffer.clear();
lib/logViewSearchWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewSearchWidget.cpp:    d->logViewWidget = NULL;
lib/logViewSearchWidget.cpp:    d->searchLineBaseColor = searchLine->palette().color(QPalette::Base);
lib/logViewSearchWidget.cpp:    d->searchLineTextColor = searchLine->palette().color(QPalette::Text);
lib/logViewSearchWidget.cpp:    d->messageHidingTimer = new QTimer(this);
lib/logViewSearchWidget.cpp:    d->messageHidingTimer->setSingleShot(true);
lib/logViewSearchWidget.cpp:    d->messageHidingTimer->setInterval(2000);
lib/logViewSearchWidget.cpp:    connect(d->messageHidingTimer, &QTimer::timeout, this, &LogViewSearchWidget::hideMessage);
lib/logViewSearchWidget.cpp:    closeButton->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/close.svg")));
lib/logViewSearchWidget.cpp:    next->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/down.svg")));
lib/logViewSearchWidget.cpp:    previous->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/up.svg")));
lib/logViewSearchWidget.cpp:    searchLabel->setBuddy(searchLine);
lib/logViewSearchWidget.cpp:    findFirst(searchLine->text());
lib/logViewSearchWidget.cpp:    searchLine->setFocus();
lib/logViewSearchWidget.cpp:    searchLine->setSelection(0, searchLine->text().length());
lib/logViewSearchWidget.cpp:    d->logViewWidget = logViewWidget;
lib/logViewSearchWidget.cpp:    next->setEnabled(textIsNotEmpty);
lib/logViewSearchWidget.cpp:    previous->setEnabled(textIsNotEmpty);
lib/logViewSearchWidget.cpp:    LogViewWidgetItem *lastSelectedItem = d->logViewWidget->lastSelectedItem();
lib/logViewSearchWidget.cpp:    LogViewWidgetItem *firstSelectedItem = d->logViewWidget->firstSelectedItem();
lib/logViewSearchWidget.cpp:    if (searchLine->text().isEmpty()) {
lib/logViewSearchWidget.cpp:    QTreeWidgetItemIterator it(d->logViewWidget, QTreeWidgetItemIterator::NotHidden);
lib/logViewSearchWidget.cpp:        it = QTreeWidgetItemIterator(d->logViewWidget, QTreeWidgetItemIterator::NotHidden);
lib/logViewSearchWidget.cpp:                showMessage(i18n("Reached end of list."), QStringLiteral("dialog-information"));
lib/logViewSearchWidget.cpp:        --it;
lib/logViewSearchWidget.cpp:    if (caseSensitive->isChecked()) {
lib/logViewSearchWidget.cpp:    if (searchLine->text().isEmpty())
lib/logViewSearchWidget.cpp:    if (item->logLine()->exportToText().contains(searchLine->text(), caseSensitivity)) {
lib/logViewSearchWidget.cpp:        item->setSelected(true);
lib/logViewSearchWidget.cpp:        d->logViewWidget->setCurrentItem(item);
lib/logViewSearchWidget.cpp:        d->logViewWidget->scrollToItem(item);
lib/logViewSearchWidget.cpp:    QPalette palette = searchLine->palette();
lib/logViewSearchWidget.cpp:        palette.setColor(QPalette::Base, d->searchLineBaseColor);
lib/logViewSearchWidget.cpp:        palette.setColor(QPalette::Text, d->searchLineTextColor);
lib/logViewSearchWidget.cpp:    searchLine->setPalette(palette);
lib/logViewSearchWidget.cpp:        showMessage(i18n("Phrase not found."), QStringLiteral("dialog-error"));
lib/logViewSearchWidget.cpp:    QList<QTreeWidgetItem *> selectedItems = d->logViewWidget->selectedItems();
lib/logViewSearchWidget.cpp:        item->setSelected(false);
lib/logViewSearchWidget.cpp:    message->setText(text);
lib/logViewSearchWidget.cpp:    message->show();
lib/logViewSearchWidget.cpp:    messageIcon->setPixmap(SmallIcon(iconText));
lib/logViewSearchWidget.cpp:    messageIcon->show();
lib/logViewSearchWidget.cpp:    d->messageHidingTimer->start();
lib/logViewSearchWidget.cpp:    message->hide();
lib/logViewSearchWidget.cpp:    messageIcon->hide();
lib/logViewSearchWidget.cpp:    d->messageHidingTimer->stop();
lib/logViewSearchWidget.cpp:    if (highlightAllButton->isChecked()) {
lib/logViewSearchWidget.cpp:        QTreeWidgetItemIterator it(d->logViewWidget, QTreeWidgetItemIterator::All);
lib/logViewSearchWidget.cpp:                item->setBackgroundColor(item->columnCount() - 1, QColor(255, 255, 16 * 8 + 11));
lib/logViewSearchWidget.cpp:    QTreeWidgetItemIterator it(d->logViewWidget, QTreeWidgetItemIterator::All);
lib/logViewSearchWidget.cpp:        item->setBackground(item->columnCount() - 1,
lib/logViewSearchWidget.cpp:                            qvariant_cast<QBrush>(item->data(0, Qt::BackgroundRole)));
lib/kioLogFileReader.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/multipleActions.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewExport.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewWidgetItem.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFileReader.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewColumns.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewColumns.cpp:    d->groupByLogLevel = true;
lib/logViewColumns.cpp:    d->groupByDay = true;
lib/logViewColumns.cpp:    d->groupByHour = true;
lib/logViewColumns.cpp:    d->groupByLogFile = true;
lib/logViewColumns.cpp:    d->columns = columns.columns();
lib/logViewColumns.cpp:    d->groupByLogLevel = columns.isGroupByLogLevel();
lib/logViewColumns.cpp:    d->groupByDay = columns.isGroupByDay();
lib/logViewColumns.cpp:    d->groupByHour = columns.isGroupByHour();
lib/logViewColumns.cpp:    d->groupByLogFile = columns.isGroupByLogFile();
lib/logViewColumns.cpp:    d->groupByLogLevel = value;
lib/logViewColumns.cpp:    d->groupByDay = value;
lib/logViewColumns.cpp:    d->groupByHour = value;
lib/logViewColumns.cpp:    d->groupByLogFile = value;
lib/logViewColumns.cpp:    return d->groupByLogLevel;
lib/logViewColumns.cpp:    return d->groupByDay;
lib/logViewColumns.cpp:    return d->groupByHour;
lib/logViewColumns.cpp:    return d->groupByLogFile;
lib/logViewColumns.cpp:    foreach (const LogViewColumn &column, d->columns) {
lib/logViewColumns.cpp:    d->columns.append(column);
lib/logViewColumns.cpp:    return d->columns;
lib/logViewColumns.cpp:    d->columns = columns.columns();
lib/logViewColumns.cpp:    d->groupByLogLevel = columns.isGroupByLogLevel();
lib/logViewColumns.cpp:    d->groupByDay = columns.isGroupByDay();
lib/logViewColumns.cpp:    d->groupByHour = columns.isGroupByHour();
lib/logViewColumns.cpp:    d->groupByLogFile = columns.isGroupByLogFile();
lib/logFile.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLevel.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/simpleAction.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/simpleAction.cpp:    action->setIcon(originAction->icon());
lib/simpleAction.cpp:    action->setText(originAction->text());
lib/simpleAction.cpp:    action->setData(originAction->data());
lib/simpleAction.cpp:    action->setToolTip(originAction->toolTip());
lib/simpleAction.cpp:    action->setWhatsThis(originAction->whatsThis());
lib/logModeConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeConfigurationWidget.cpp:    d->itemName = itemName;
lib/logModeConfigurationWidget.cpp:    d->iconName = iconName;
lib/logModeConfigurationWidget.cpp:    d->header = header;
lib/logModeConfigurationWidget.cpp:    return d->itemName;
lib/logModeConfigurationWidget.cpp:    // Run a ls /usr/share/icons/*/*/*/*/<generic-name>
lib/logModeConfigurationWidget.cpp:    return d->iconName;
lib/logModeConfigurationWidget.cpp:    return d->header;
lib/logModeAction.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/loadingBar.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/loadingBar.cpp:    d->firstLoading = true;
lib/loadingBar.cpp:    widgetLayout->addStretch();
lib/loadingBar.cpp:    widgetLayout->addLayout(layout);
lib/loadingBar.cpp:    widgetLayout->addStretch();
lib/loadingBar.cpp:    d->label = new QLabel(i18n("Loading Progress..."));
lib/loadingBar.cpp:    d->label->setMinimumWidth(250);
lib/loadingBar.cpp:    layout->addWidget(d->label, 1, Qt::AlignBottom);
lib/loadingBar.cpp:    d->progressBar = new QProgressBar();
lib/loadingBar.cpp:    d->progressBar->setRange(0, 100);
lib/loadingBar.cpp:    d->progressBar->setMinimumWidth(250);
lib/loadingBar.cpp:    layout->addWidget(d->progressBar, 1, Qt::AlignCenter | Qt::AlignTop);
lib/loadingBar.cpp:    return d->progressBar;
lib/loadingBar.cpp:    d->progressBar->setValue(0);
lib/loadingBar.cpp:        if (d->firstLoading)
lib/loadingBar.cpp:            d->label->setText(i18np("Loading <b>%2</b>...<br /><i>%3</i> - (<b>%4</b>)",
lib/loadingBar.cpp:                                    "Loading <b>%2</b>...<br /><i>%3</i> - (<b>%4</b>/%1 files)", fileCount,
lib/loadingBar.cpp:            d->label->setText(i18np("Reloading <b>%2</b>...<br /><i>%3</i> - (<b>%4</b>)",
lib/loadingBar.cpp:                                    "Reloading <b>%2</b>...<br /><i>%3</i> - (<b>%4</b>/%1 files)", fileCount,
lib/loadingBar.cpp:        if (d->firstLoading)
lib/loadingBar.cpp:            d->label->setText(
lib/loadingBar.cpp:            d->label->setText(
lib/loadingBar.cpp:    d->progressBar->setValue(100);
lib/loadingBar.cpp:    d->firstLoading = false;
lib/loadingBar.cpp:    d->progressBar->setValue(d->progressBar->value() + 1);
lib/loadingBar.cpp:    // kapp->processEvents();
lib/loadingBar.cpp:    qApp->processEvents();
lib/logManager.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logManager.cpp:    d->lastUpdate = QTime::currentTime();
lib/logManager.cpp:    d->logMode = NULL;
lib/logManager.cpp:    d->analyzer = NULL;
lib/logManager.cpp:    d->usedView = view;
lib/logManager.cpp:    connect(d->usedView, &View::droppedUrls, this, &LogManager::loadDroppedUrls);
lib/logManager.cpp:    return d->usedView;
lib/logManager.cpp:    if (d->logMode == NULL) {
lib/logManager.cpp:    logDebug() << "Reloading with log mode " << d->logMode->name() << "...";
lib/logManager.cpp:    emit tabTitleChanged(d->usedView, d->logMode->icon(), d->logMode->name());
lib/logManager.cpp:    emit windowTitleChanged(d->logMode->name());
lib/logManager.cpp:    d->usedView->logViewWidget()->model()->clear();
lib/logManager.cpp:    d->usedView->logViewWidget()->setColumns(d->analyzer->initColumns());
lib/logManager.cpp:    d->analyzer->watchLogFiles(false);
lib/logManager.cpp:    d->analyzer->watchLogFiles(true);
lib/logManager.cpp:    logDebug() << "Log mode " << d->logMode->name() << " reloaded";
lib/logManager.cpp:    if (d->analyzer)
lib/logManager.cpp:        d->analyzer->watchLogFiles(false);
lib/logManager.cpp:    return d->analyzerOptions;
lib/logManager.cpp:    return d->logMode;
lib/logManager.cpp:    if (!d->analyzerStatus.isEmpty())
lib/logManager.cpp:        return d->logMode->name() + " - " + d->analyzerStatus;
lib/logManager.cpp:        return d->logMode->name();
lib/logManager.cpp:    return d->lastUpdate;
lib/logManager.cpp:    d->lastUpdate = QTime::currentTime();
lib/logManager.cpp:    emit logUpdated(d->usedView, lineCount);
lib/logManager.cpp:    d->logMode = NULL;
lib/logManager.cpp:    delete d->analyzer;
lib/logManager.cpp:    d->analyzer = NULL;
lib/logManager.cpp:    d->analyzerStatus.clear();
lib/logManager.cpp:    internalInitialize(mode, mode->createLogFiles(), analyzerOptions);
lib/logManager.cpp:    d->analyzerOptions = analyzerOptions;
lib/logManager.cpp:    d->logMode = mode;
lib/logManager.cpp:    d->analyzer = mode->createAnalyzer(analyzerOptions);
lib/logManager.cpp:    d->analyzer->setLogViewModel(d->usedView->logViewWidget()->model());
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::statusChanged, this, [this](const QString &status) {
lib/logManager.cpp:        d->analyzerStatus = status;
lib/logManager.cpp:        emit tabTitleChanged(d->usedView, d->logMode->icon(), title());
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::statusBarChanged, this, &LogManager::statusBarChanged);
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::errorOccured, this,
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::logUpdated, this, &LogManager::updateLog);
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::readFileStarted, d->usedView->loadingBar(),
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::openingProgressed, d->usedView->loadingBar(), &LoadingBar::progressLoading);
lib/logManager.cpp:    connect(d->analyzer, &Analyzer::readEnded, d->usedView->loadingBar(), &LoadingBar::endLoading);
lib/logManager.cpp:    d->analyzer->setLogFiles(logFiles);
lib/logManager.cpp:    KMessageBox::error(d->usedView, message, title, KMessageBox::Notify);
lib/logManager.cpp:    if (d->logMode == NULL) {
lib/logManager.cpp:        d->usedView->logViewWidget()->model()->clear();
lib/logManager.cpp:        d->usedView->logViewWidget()->setColumns(d->analyzer->initColumns());
lib/logManager.cpp:    d->analyzer->setParsingPaused(paused);
lib/logManager.cpp:    if (d->logMode == NULL) {
lib/logManager.cpp:    return d->analyzer->isParsingPaused();
lib/logViewModel.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/processOutputLogFileReader.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeItemBuilder.cpp:    LogLine *line = item->logLine();
lib/logModeItemBuilder.cpp:    item->setText(0, formatDate(line->time()));
lib/logModeItemBuilder.cpp:    item->setData(0, Qt::UserRole, line->logLevel()->id());
lib/logModeItemBuilder.cpp:    foreach (const QString &label, line->logItems()) {
lib/logModeItemBuilder.cpp:        item->setText(i, label);
lib/logModeItemBuilder.cpp:    item->setIcon(0, line->logLevel()->pixmap());
lib/logModeItemBuilder.cpp:    QListIterator<QString> it(line->logItems());
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Original file:"), line->sourceFileName()));
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
lib/logModeItemBuilder.cpp:    result.append(labelMessageFormat(i18n("Original file:"), line->sourceFileName()));
lib/globals.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewColumn.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/levelPrintPage.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/levelPrintPage.cpp:    // m_lblChoose->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)0, 0, 0,
lib/levelPrintPage.cpp:    // m_lblChoose->sizePolicy().hasHeightForWidth() ) );
lib/levelPrintPage.cpp:    m_lblChoose->setText(i18n("Choose which log levels you wish to print in color."));
lib/levelPrintPage.cpp:    m_pageLayout->addWidget(m_lblChoose);
lib/levelPrintPage.cpp:    m_btnGroup->setColumnLayout(0, Qt::Vertical );
lib/levelPrintPage.cpp:    m_btnGroup->layout()->setSpacing( 6 );
lib/levelPrintPage.cpp:    m_btnGroup->layout()->setMargin( 11 );
lib/levelPrintPage.cpp:    m_btnGroupLayout = new QGridLayout( m_btnGroup->layout() );
lib/levelPrintPage.cpp:    m_btnGroupLayout->setAlignment( Qt::AlignTop );
lib/levelPrintPage.cpp:        QCheckBox *button = new QCheckBox(level->name()); //, m_btnGroup, 0
lib/levelPrintPage.cpp:        m_btnGroup->addButton(button, level->id());
lib/levelPrintPage.cpp:        m_btnGroupLayout->addWidget(button, row, col);
lib/levelPrintPage.cpp:        logDebug() << "name: " << level->name() << " id: " << level->id();
lib/levelPrintPage.cpp:    // m_pageLayout->addWidget(m_btnGroup);
lib/levelPrintPage.cpp:        QString key = "kde-ksystemlog-print_" + level->name();
lib/levelPrintPage.cpp:        QCheckBox* checkBox = static_cast<QCheckBox*>(m_btnGroup->find(level->id()));
lib/levelPrintPage.cpp:            if (checkBox->isChecked())
lib/levelPrintPage.cpp:        QString key = "kde-ksystemlog-print_" + level->name();
lib/levelPrintPage.cpp:        QCheckBox* checkBox = static_cast<QCheckBox*>(m_btnGroup->find(level->id()));
lib/levelPrintPage.cpp:                checkBox->setChecked(true);
lib/levelPrintPage.cpp:                checkBox->setChecked(false);
lib/simpleAction.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLevel.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLevel.cpp:    d->id = id;
lib/logLevel.cpp:    d->name = nm;
lib/logLevel.cpp:    d->icon = ic;
lib/logLevel.cpp:    d->color = col;
lib/logLevel.cpp:    d->pixmap = SmallIcon(ic);
lib/logLevel.cpp:    return d->id;
lib/logLevel.cpp:    return d->name;
lib/logLevel.cpp:    return d->icon;
lib/logLevel.cpp:    return d->color;
lib/logLevel.cpp:    return d->pixmap;
lib/multipleActions.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/multipleActions.cpp:        action->addAction(innerAction);
lib/kioLogFileReader.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/kioLogFileReader.cpp:    d->fileJob = NULL;
lib/kioLogFileReader.cpp:    d->totalRead = 0;
lib/kioLogFileReader.cpp:    d->fileWatch = new KDirWatch(this);
lib/kioLogFileReader.cpp:    connect(d->fileWatch, &KDirWatch::dirty, this, &KioLogFileReader::watchFile);
lib/kioLogFileReader.cpp:    d->fileWatch->addFile(logFile.url().path());
lib/kioLogFileReader.cpp:    d->fileWatch.setInterval(1000);
lib/kioLogFileReader.cpp:    connect(& (d->fileWatch), SIGNAL(timeout()), this, SLOT(watchFile()));
lib/kioLogFileReader.cpp:    d->fileJob = KIO::open(d->logFile.url(), QIODevice::ReadOnly | QIODevice::Text);
lib/kioLogFileReader.cpp:    connect(d->fileJob, &KIO::FileJob::open, this, &KioLogFileReader::openDone);
lib/kioLogFileReader.cpp:    connect(d->fileJob, SIGNAL(close(KIO::Job *)), this, SLOT(closeDone(KIO::Job *)));
lib/kioLogFileReader.cpp:    connect(d->fileJob, &KIO::FileJob::data, this,
lib/kioLogFileReader.cpp:    connect(d->fileJob, &KIO::FileJob::mimetype, this,
lib/kioLogFileReader.cpp:    d->fileJob->close();
lib/kioLogFileReader.cpp:    d->fileJob->read(READ_SIZE);
lib/kioLogFileReader.cpp:    if (job != d->fileJob) {
lib/kioLogFileReader.cpp:    // logDebug() << "Receiving data... (" << d->totalRead << ")";
lib/kioLogFileReader.cpp:    d->buffer.append(QLatin1String(data));
lib/kioLogFileReader.cpp:    d->totalRead += data.size();
lib/kioLogFileReader.cpp:    logDebug() << "Total read : " << d->totalRead << " of " << d->fileJob->size();
lib/kioLogFileReader.cpp:    if (d->totalRead < d->fileJob->size()) {
lib/kioLogFileReader.cpp:        d->fileJob->read(READ_SIZE);
lib/kioLogFileReader.cpp:        d->fileWatch->startScan();
lib/kioLogFileReader.cpp:    // logDebug() << "Data received : " << d->buffer;
lib/kioLogFileReader.cpp:    // d->totalRead++;
lib/kioLogFileReader.cpp:    int endLinePos = d->buffer.indexOf(QLatin1String("\n"));
lib/kioLogFileReader.cpp:        if (endLinePos == -1)
lib/kioLogFileReader.cpp:        emit lineRead(d->buffer.left(endLinePos));
lib/kioLogFileReader.cpp:        d->buffer.remove(0, endLinePos + 1);
lib/kioLogFileReader.cpp:        endLinePos = d->buffer.indexOf(QLatin1String("\n"));
lib/kioLogFileReader.cpp:    if (d->totalRead == d->fileJob->size()) {
lib/kioLogFileReader.cpp:        emit lineRead(d->buffer);
lib/kioLogFileReader.cpp:        d->buffer.clear();
lib/logViewSearchWidgetBase.ui:    <number>-1</number>
lib/logViewWidgetItem.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewWidgetItem.cpp:    line->setItem(this);
lib/logViewWidgetItem.cpp:        setToolTip(columnCount() - 1, line->logMode()->itemBuilder()->createToolTipText(line));
lib/logViewWidgetItem.cpp:        setToolTip(columnCount() - 1, QLatin1String(""));
lib/logViewWidgetItem.cpp:    int sortedColumn = treeWidget()->sortColumn();
lib/logViewWidgetItem.cpp:        return line->isOlderThan(*(otherItem.logLine()));
lib/logViewColumns.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFileReaderPrivate.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logMode.cpp:    d->id = id;
lib/logMode.cpp:    d->name = name;
lib/logMode.cpp:    // d->icon = SmallIcon(iconName, KIconLoader::SizeLarge);
lib/logMode.cpp:    d->icon = DesktopIcon(iconName);
lib/logMode.cpp:    d->logFilesExist = true;
lib/logMode.cpp:    delete d->action;
lib/logMode.cpp:    delete d->itemBuilder;
lib/logMode.cpp:    return d->id;
lib/logMode.cpp:    return d->name;
lib/logMode.cpp:    return d->icon;
lib/logMode.cpp:    return d->action;
lib/logMode.cpp:    return d->itemBuilder;
lib/logMode.cpp:    return d->logFilesExist;
lib/logMode.cpp:    return d->logModeConfigurationWidget;
lib/logMode.cpp:    return d->logModeConfiguration.data();
lib/logMode.cpp:    QAction *action = new QAction(d->icon, d->name, this);
lib/logMode.cpp:    data.id = d->id;
lib/logMode.cpp:    action->setData(QVariant::fromValue(data));
lib/logMode.cpp:    d->logFilesExist = false;
lib/logMode.cpp:            d->logFilesExist = true;
lib/globals.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/globals.cpp:    foreach (LogModeAction *logModeAction, d->logModeActions) {
lib/globals.cpp:    d->logModeActions.clear();
lib/globals.cpp:    foreach (LogMode *logMode, d->logModes) {
lib/globals.cpp:    d->logModes.clear();
lib/globals.cpp:    foreach (LogLevel *logLevel, d->logLevels) {
lib/globals.cpp:    d->logLevels.clear();
lib/globals.cpp:    foreach (LogModeFactory *factory, d->factories) {
lib/globals.cpp:    d->factories.clear();
lib/globals.cpp:    int index = metaObject()->indexOfEnumerator("LogLevelIds");
lib/globals.cpp:    d->logLevelsMetaEnum = metaObject()->enumerator(index);
lib/globals.cpp:    d->noLogLevel = new LogLevel(NONE_LOG_LEVEL_ID, i18n("None"), QStringLiteral("help-contents"),
lib/globals.cpp:    d->logLevels.append(d->noLogLevel);
lib/globals.cpp:    d->debugLogLevel
lib/globals.cpp:    d->logLevels.append(d->debugLogLevel);
lib/globals.cpp:    d->informationLogLevel
lib/globals.cpp:        = new LogLevel(INFORMATION_LOG_LEVEL_ID, i18n("Information"), QStringLiteral("dialog-information"),
lib/globals.cpp:    d->logLevels.append(d->informationLogLevel);
lib/globals.cpp:    d->noticeLogLevel
lib/globals.cpp:    d->logLevels.append(d->noticeLogLevel);
lib/globals.cpp:    d->warningLogLevel = new LogLevel(WARNING_LOG_LEVEL_ID, i18n("Warning"), QStringLiteral("dialog-warning"),
lib/globals.cpp:    d->logLevels.append(d->warningLogLevel);
lib/globals.cpp:    d->errorLogLevel
lib/globals.cpp:        = new LogLevel(ERROR_LOG_LEVEL_ID, i18n("Error"), QStringLiteral("dialog-close"), QColor(173, 28, 28));
lib/globals.cpp:    d->logLevels.append(d->errorLogLevel);
lib/globals.cpp:    d->criticalLogLevel
lib/globals.cpp:    d->logLevels.append(d->criticalLogLevel);
lib/globals.cpp:    d->alertLogLevel
lib/globals.cpp:    d->logLevels.append(d->alertLogLevel);
lib/globals.cpp:    d->emergencyLogLevel = new LogLevel(EMERGENCY_LOG_LEVEL_ID, i18n("Emergency"),
lib/globals.cpp:                                        QStringLiteral("application-exit"), QColor(255, 0, 0));
lib/globals.cpp:    d->logLevels.append(d->emergencyLogLevel);
lib/globals.cpp:    return d->logModes.values();
lib/globals.cpp:    return d->logLevels;
lib/globals.cpp:    return d->noLogLevel;
lib/globals.cpp:    return d->debugLogLevel;
lib/globals.cpp:    return d->informationLogLevel;
lib/globals.cpp:    return d->noticeLogLevel;
lib/globals.cpp:    return d->warningLogLevel;
lib/globals.cpp:    return d->errorLogLevel;
lib/globals.cpp:    return d->criticalLogLevel;
lib/globals.cpp:    return d->alertLogLevel;
lib/globals.cpp:    return d->emergencyLogLevel;
lib/globals.cpp:    return d->logLevelsMetaEnum;
lib/globals.cpp:    QList<LogMode *> logModes = logModeFactory->createLogModes();
lib/globals.cpp:        d->logModes.insert(logMode->id(), logMode);
lib/globals.cpp:    LogModeAction *logModeAction = logModeFactory->createLogModeAction();
lib/globals.cpp:        d->logModeActions.append(logModeAction);
lib/globals.cpp:    d->factories.append(logModeFactory);
lib/globals.cpp:    return d->logModes.value(logModeName);
lib/globals.cpp:    foreach (LogModeAction *logModeAction, d->logModeActions) {
lib/globals.cpp:    d->logModeActions.clear();
lib/globals.cpp:    foreach (LogModeFactory *factory, d->factories) {
lib/globals.cpp:        LogModeAction *logModeAction = factory->createLogModeAction();
lib/globals.cpp:            d->logModeActions.append(logModeAction);
lib/globals.cpp:    return d->logModeActions;
lib/defaults.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/defaults.h:#define KSYSTEMLOG_ICON "/usr/local/share/icons/logavista/viewer.svg"
lib/defaults.h:#define NO_MODE_ICON "/usr/local/share/icons/logavista/template.svg"
lib/logViewColumn.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewColumn.cpp:    d->columnName = name;
lib/logViewColumn.cpp:    d->filtered = filtered;
lib/logViewColumn.cpp:    d->grouped = grouped;
lib/logViewColumn.cpp:    d->columnName = column.columnName();
lib/logViewColumn.cpp:    d->filtered = column.isFiltered();
lib/logViewColumn.cpp:    d->grouped = column.isGrouped();
lib/logViewColumn.cpp:    return d->columnName;
lib/logViewColumn.cpp:    return d->grouped;
lib/logViewColumn.cpp:    return d->filtered;
lib/logViewColumn.cpp:    d->columnName = column.columnName();
lib/logViewColumn.cpp:    d->grouped = column.isGrouped();
lib/logViewColumn.cpp:    d->filtered = column.isFiltered();
lib/logModeFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLine.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logLine.cpp:    d->internalId = internalId;
lib/logLine.cpp:    d->time = dateTime;
lib/logLine.cpp:    d->logItems = logItems;
lib/logLine.cpp:    d->originalFile = file;
lib/logLine.cpp:    d->logLevel = logLevel;
lib/logLine.cpp:    d->logMode = logMode;
lib/logLine.cpp:    d->item = NULL;
lib/logLine.cpp:    return d->logMode;
lib/logLine.cpp:    d->logMode = logMode;
lib/logLine.cpp:    if (logMode()->id() != other.logMode()->id())
lib/logLine.cpp:    if (logLevel()->id() != other.logLevel()->id())
lib/logLine.cpp:    if (d->logItems != other.d->logItems)
lib/logLine.cpp:    return d->logLevel;
lib/logLine.cpp:    d->logLevel = level;
lib/logLine.cpp:    return d->time;
lib/logLine.cpp:    d->logItems = logItems;
lib/logLine.cpp:    return d->logItems;
lib/logLine.cpp:    return d->originalFile;
lib/logLine.cpp:    if (d->time == other.time())
lib/logLine.cpp:        return d->internalId < other.internalId();
lib/logLine.cpp:    return d->time < other.time();
lib/logLine.cpp:    if (d->time == other.time())
lib/logLine.cpp:        return d->internalId > other.internalId();
lib/logLine.cpp:    return d->time > other.time();
lib/logLine.cpp:    return d->time == other.time();
lib/logLine.cpp:    return d->internalId;
lib/logLine.cpp:    d->recent = recent;
lib/logLine.cpp:    if (d->item != NULL) {
lib/logLine.cpp:        QFont currentFont = d->item->font(d->item->columnCount() - 1);
lib/logLine.cpp:        if (d->recent != currentFont.bold()) {
lib/logLine.cpp:            d->item->setFont(d->item->columnCount() - 1, currentFont);
lib/logLine.cpp:    if (d->item == NULL) {
lib/logLine.cpp:    for (int i = 0; i < d->item->columnCount(); ++i) {
lib/logLine.cpp:        exporting.append(d->item->text(i));
lib/logLine.cpp:    return d->logMode->itemBuilder()->createFormattedText(this);
lib/logLine.cpp:    d->item = item;
lib/logLine.cpp:    d->logMode->itemBuilder()->prepareItem(d->item);
lib/logLine.cpp:    setRecent(d->recent);
lib/logLine.cpp:        // Last column index = d->logItems.count() = (d->logItems.count() -1) +1 (the date column)
lib/logLine.cpp:        d->item->setForeground(d->logItems.count(), QBrush(d->logLevel->color()));
lib/logLine.cpp:    d->item->toggleToolTip(KSystemLogConfig::tooltipEnabled());
lib/analyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/analyzer.cpp:    this->logViewModel = logViewModel;
lib/fileAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logModeItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFile.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFile.cpp:    d->url = logFile.url();
lib/logFile.cpp:    d->defaultLogLevel = logFile.defaultLogLevel();
lib/logFile.cpp:    d->url = url;
lib/logFile.cpp:    d->defaultLogLevel = defaultLogLevel;
lib/logFile.cpp:    if (d->url == other.url() && d->defaultLogLevel == other.defaultLogLevel())
lib/logFile.cpp:    d->url = logFile.url();
lib/logFile.cpp:    d->defaultLogLevel = logFile.defaultLogLevel();
lib/logFile.cpp:    return d->url;
lib/logFile.cpp:    return d->defaultLogLevel;
lib/logViewSearchWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/localLogFileReader.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/view.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/loadingBar.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewModel.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewModel.cpp:    d->logViewWidget = logViewWidget;
lib/logViewModel.cpp:    d->oldestItem = NULL;
lib/logViewModel.cpp:    d->concurrentMultipleInsertions = 0;
lib/logViewModel.cpp:    LogViewWidgetItem *item = d->logViewWidget->findItem(line);
lib/logViewModel.cpp:    return d->logViewWidget->logLines();
lib/logViewModel.cpp:    return d->logViewWidget->itemCount();
lib/logViewModel.cpp:    if (d->logViewWidget->itemCount() == 0)
lib/logViewModel.cpp:    foreach (LogViewWidgetItem *item, d->logViewWidget->items()) {
lib/logViewModel.cpp:        item->logLine()->setRecent(false);
lib/logViewModel.cpp:    d->concurrentMultipleInsertions++;
lib/logViewModel.cpp:        d->logViewWidget->setUpdatesEnabled(false);
lib/logViewModel.cpp:    d->concurrentMultipleInsertions--;
lib/logViewModel.cpp:            d->logViewWidget->scrollToNewestItem();
lib/logViewModel.cpp:            d->logViewWidget->resizeColumns();
lib/logViewModel.cpp:        d->logViewWidget->setUpdatesEnabled(true);
lib/logViewModel.cpp:    if (d->concurrentMultipleInsertions == 0) {
lib/logViewModel.cpp:    if (d->concurrentMultipleInsertions > 0) {
lib/logViewModel.cpp:    } else if (d->concurrentMultipleInsertions < 0) {
lib/logViewModel.cpp:    if (d->concurrentMultipleInsertions == 0)
lib/logViewModel.cpp:    d->logViewWidget->clear();
lib/logViewModel.cpp:    d->oldestItem = NULL;
lib/logViewModel.cpp:    if (d->oldestItem == NULL)
lib/logViewModel.cpp:    if (newLine->isNewerThan(*(d->oldestItem->logLine())))
lib/logViewModel.cpp:    if (d->oldestItem == NULL) {
lib/logViewModel.cpp:    d->logViewWidget->takeTopLevelItem(d->logViewWidget->indexOfTopLevelItem(d->oldestItem));
lib/logViewModel.cpp:    delete d->oldestItem;
lib/logViewModel.cpp:    d->oldestItem = NULL;
lib/logViewModel.cpp:    foreach (LogViewWidgetItem *item, d->logViewWidget->items()) {
lib/logViewModel.cpp:        if (d->oldestItem == NULL) {
lib/logViewModel.cpp:            d->oldestItem = item;
lib/logViewModel.cpp:        if (d->oldestItem->logLine()->isNewerThan(*(item->logLine()))) {
lib/logViewModel.cpp:            d->oldestItem = item;
lib/logViewModel.cpp:    LogViewWidgetItem *item = new LogViewWidgetItem(d->logViewWidget, line);
lib/logViewModel.cpp:    if (d->oldestItem == NULL) {
lib/logViewModel.cpp:        d->oldestItem = item;
lib/logViewModel.cpp:    } else if (d->oldestItem->logLine()->isNewerThan(*line)) {
lib/logViewModel.cpp:        d->oldestItem = item;
lib/logViewModel.cpp:    // logDebug() << "Do not insert an old line : " << line->logItems();
lib/logManager.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewFilterWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logViewFilterWidget.cpp:    d->priorities[priority] = enabled;
lib/logViewFilterWidget.cpp:    int priority = item->data(0, Qt::UserRole).toInt();
lib/logViewFilterWidget.cpp:        if (!d->priorities[priority])
lib/logViewFilterWidget.cpp:    filterBarLayout->setMargin(0);
lib/logViewFilterWidget.cpp:    d->filterLine = new LogViewWidgetSearchLine();
lib/logViewFilterWidget.cpp:    d->filterLine->setToolTip(i18n("Type your filter here"));
lib/logViewFilterWidget.cpp:    d->filterLine->setWhatsThis(i18n("Allows you to only list items that match the content of this text."));
lib/logViewFilterWidget.cpp:    d->filterLine->setPlaceholderText(i18n("Enter your search here..."));
lib/logViewFilterWidget.cpp:    filterIcon->setPixmap(DesktopIcon(QStringLiteral("/usr/local/share/icons/logavista/filter.svg")));
lib/logViewFilterWidget.cpp:    filterIcon->setBuddy(d->filterLine);
lib/logViewFilterWidget.cpp:    filterBarLayout->addWidget(filterIcon);
lib/logViewFilterWidget.cpp:    filterLabel->setBuddy(d->filterLine);
lib/logViewFilterWidget.cpp:    filterBarLayout->addWidget(filterLabel);
lib/logViewFilterWidget.cpp:    filterBarLayout->addWidget(d->filterLine);
lib/logViewFilterWidget.cpp:    filterBarLayout->addWidget(d->filterList);
lib/logViewFilterWidget.cpp:    d->prioritiesComboBox = new QComboBox(this);
lib/logViewFilterWidget.cpp:    ComboBoxDelegate *delegate = new ComboBoxDelegate(d->prioritiesComboBox);
lib/logViewFilterWidget.cpp:    d->prioritiesComboBox->setItemDelegate(delegate);
lib/logViewFilterWidget.cpp:    filterBarLayout->addWidget(d->prioritiesComboBox);
lib/logViewFilterWidget.cpp:    d->prioritiesModel = new QStandardItemModel(d->prioritiesComboBox);
lib/logViewFilterWidget.cpp:    d->prioritiesComboBox->setModel(d->prioritiesModel);
lib/logViewFilterWidget.cpp:    item->setSelectable(false);
lib/logViewFilterWidget.cpp:    d->prioritiesModel->appendRow(item);
lib/logViewFilterWidget.cpp:    connect(d->prioritiesModel, &QStandardItemModel::itemChanged,
lib/logViewFilterWidget.cpp:    for (int i = 0; i < metaEnum.keyCount() - 1; i++) {
lib/logViewFilterWidget.cpp:        QStandardItem *item = new QStandardItem(logLevel->name());
lib/logViewFilterWidget.cpp:        item->setFlags(Qt::ItemIsUserCheckable | Qt::ItemIsEnabled);
lib/logViewFilterWidget.cpp:        item->setData(Qt::Checked, Qt::CheckStateRole);
lib/logViewFilterWidget.cpp:        item->setData(metaEnum.value(i), Qt::UserRole);
lib/logViewFilterWidget.cpp:        item->setData(QVariant(logLevel->color()), Qt::ForegroundRole);
lib/logViewFilterWidget.cpp:        d->prioritiesModel->appendRow(item);
lib/logViewFilterWidget.cpp:    d->filterList = new KComboBox();
lib/logViewFilterWidget.cpp:    d->filterList->setToolTip(i18n("Choose the filtered column here"));
lib/logViewFilterWidget.cpp:    d->filterList->setWhatsThis(i18n(
lib/logViewFilterWidget.cpp:    d->filterList->addItem(i18n("All"));
lib/logViewFilterWidget.cpp:    d->filterList->setSizeAdjustPolicy(QComboBox::AdjustToContents);
lib/logViewFilterWidget.cpp:    connect(d->filterList, SIGNAL(activated(int)), d->filterLine, SLOT(setFocus()));
lib/logViewFilterWidget.cpp:    connect(d->filterList, SIGNAL(activated(int)), this, SLOT(changeColumnFilter(int)));
lib/logViewFilterWidget.cpp:    connect(d->filterList, SIGNAL(activated(int)), d->filterLine, SLOT(updateSearch()));
lib/logViewFilterWidget.cpp:    d->filterList->clear();
lib/logViewFilterWidget.cpp:    d->filterList->addItem(i18n("All"));
lib/logViewFilterWidget.cpp:            d->filterList->addItem(column.columnName());
lib/logViewFilterWidget.cpp:    d->filterList->setCurrentIndex(0);
lib/logViewFilterWidget.cpp:        d->filterLine->setSearchColumns(QList<int>());
lib/logViewFilterWidget.cpp:    logDebug() << "Searching on " << d->filterList->currentIndex() << " column";
lib/logViewFilterWidget.cpp:    // currentIndex() - 1 to do not count the "All" columns item
lib/logViewFilterWidget.cpp:    filterColumns.append(d->filterList->currentIndex() - 1);
lib/logViewFilterWidget.cpp:    d->filterLine->setSearchColumns(filterColumns);
lib/logViewFilterWidget.cpp:    int priority = item->data(Qt::UserRole).toInt();
lib/logViewFilterWidget.cpp:    bool priorityEnabled = (item->checkState() == Qt::Checked);
lib/logViewFilterWidget.cpp:    d->filterLine->setPriorityEnabled(priority, priorityEnabled);
lib/logViewFilterWidget.cpp:    return d->filterList;
lib/logViewFilterWidget.cpp:    return d->filterLine;
lib/logViewFilterWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFileReader.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
lib/logFileReader.cpp:    d->logFile = logFile;
lib/logFileReader.cpp:    d->logFile = logFile;
lib/logFileReader.cpp:    return d->logFile;
loggerDialog.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
loggerDialog.cpp:    QList<QString> prioKeys(d->priorities.keys());
loggerDialog.cpp:        priority->addItem(d->priorityIcons[*itPriority], *itPriority);
loggerDialog.cpp:    for (int i = 0; i < priority->count(); ++i) {
loggerDialog.cpp:        if (priority->itemText(i) == Globals::instance().noticeLogLevel()->name()) {
loggerDialog.cpp:            priority->setCurrentIndex(i);
loggerDialog.cpp:    QList<QString> keys(d->facilities.keys());
loggerDialog.cpp:        facility->addItem(*itFacility);
loggerDialog.cpp:    for (int i = 0; i < facility->count(); ++i) {
loggerDialog.cpp:        if (facility->itemText(i) == i18n("User")) {
loggerDialog.cpp:            facility->setCurrentIndex(i);
loggerDialog.cpp:    tag->setEnabled(false);
loggerDialog.cpp:    message->clear();
loggerDialog.cpp:    message->setFocus();
loggerDialog.cpp:    d->facilities[i18n("Authentication")] = QStringLiteral("auth");
loggerDialog.cpp:    d->facilities[i18n("Private Authentication")] = QStringLiteral("authpriv");
loggerDialog.cpp:    d->facilities[i18n("Cron")] = QStringLiteral("cron");
loggerDialog.cpp:    d->facilities[i18n("Daemon")] = QStringLiteral("daemon");
loggerDialog.cpp:    d->facilities[i18n("FTP")] = QStringLiteral("ftp");
loggerDialog.cpp:    d->facilities[i18n("Kernel")] = QStringLiteral("kern");
loggerDialog.cpp:    d->facilities[i18n("LPR")] = QStringLiteral("lpr");
loggerDialog.cpp:    d->facilities[i18n("Mail")] = QStringLiteral("mail");
loggerDialog.cpp:    d->facilities[i18n("News")] = QStringLiteral("news");
loggerDialog.cpp:    d->facilities[i18n("Syslog")] = QStringLiteral("syslog");
loggerDialog.cpp:    d->facilities[i18n("User")] = QStringLiteral("user");
loggerDialog.cpp:    d->facilities[i18n("UUCP")] = QStringLiteral("uucp");
loggerDialog.cpp:    d->facilities[i18n("Local 0")] = QStringLiteral("local0");
loggerDialog.cpp:    d->facilities[i18n("Local 1")] = QStringLiteral("local1");
loggerDialog.cpp:    d->facilities[i18n("Local 2")] = QStringLiteral("local2");
loggerDialog.cpp:    d->facilities[i18n("Local 3")] = QStringLiteral("local3");
loggerDialog.cpp:    d->facilities[i18n("Local 4")] = QStringLiteral("local4");
loggerDialog.cpp:    d->facilities[i18n("Local 5")] = QStringLiteral("local5");
loggerDialog.cpp:    d->facilities[i18n("Local 6")] = QStringLiteral("local6");
loggerDialog.cpp:    d->facilities[i18n("Local 7")] = QStringLiteral("local7");
loggerDialog.cpp:    d->priorities[Globals::instance().debugLogLevel()->name()] = QStringLiteral("debug");
loggerDialog.cpp:    d->priorities[Globals::instance().informationLogLevel()->name()] = QStringLiteral("info");
loggerDialog.cpp:    d->priorities[Globals::instance().noticeLogLevel()->name()] = QStringLiteral("notice");
loggerDialog.cpp:    d->priorities[Globals::instance().warningLogLevel()->name()] = QStringLiteral("warning");
loggerDialog.cpp:    d->priorities[Globals::instance().errorLogLevel()->name()] = QStringLiteral("err");
loggerDialog.cpp:    d->priorities[Globals::instance().criticalLogLevel()->name()] = QStringLiteral("crit");
loggerDialog.cpp:    d->priorities[Globals::instance().alertLogLevel()->name()] = QStringLiteral("alert");
loggerDialog.cpp:    d->priorities[Globals::instance().emergencyLogLevel()->name()] = QStringLiteral("emerg");
loggerDialog.cpp:    d->priorityIcons[Globals::instance().debugLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().debugLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().informationLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().informationLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().noticeLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().noticeLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().warningLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().warningLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().errorLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().errorLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().criticalLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().criticalLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().alertLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().alertLogLevel()->icon();
loggerDialog.cpp:    d->priorityIcons[Globals::instance().emergencyLogLevel()->name()]
loggerDialog.cpp:        = Globals::instance().emergencyLogLevel()->icon();
loggerDialog.cpp:    if (fileActivation->isChecked() && file->url().isEmpty()) {
loggerDialog.cpp:        buttonOK->setEnabled(false);
loggerDialog.cpp:    if (tagActivation->isChecked() && tag->text().isEmpty()) {
loggerDialog.cpp:        buttonOK->setEnabled(false);
loggerDialog.cpp:    if (messageActivation->isChecked() && message->text().isEmpty()) {
loggerDialog.cpp:        buttonOK->setEnabled(false);
loggerDialog.cpp:    buttonOK->setEnabled(true);
loggerDialog.cpp:    tag->setEnabled(activation);
loggerDialog.cpp:    file->setEnabled(activation);
loggerDialog.cpp:    message->setEnabled(activation);
loggerDialog.cpp:    if (useProcessIdentifier->isChecked()) {
loggerDialog.cpp:        arguments << QStringLiteral("-i");
loggerDialog.cpp:    if (tagActivation->isChecked()) {
loggerDialog.cpp:        arguments << QStringLiteral("-t");
loggerDialog.cpp:        arguments << tag->text();
loggerDialog.cpp:    QString prioritySelected = priority->currentText();
loggerDialog.cpp:    if (prioritySelected != Globals::instance().noLogLevel()->name()) {
loggerDialog.cpp:        arguments << QStringLiteral("-p");
loggerDialog.cpp:        QString p(d->facilities[facility->currentText()]);
loggerDialog.cpp:        p += d->priorities[priority->currentText()];
loggerDialog.cpp:    if (fileActivation->isChecked()) {
loggerDialog.cpp:        arguments << QStringLiteral("-f");
loggerDialog.cpp:        arguments << file->url().path();
loggerDialog.cpp:        arguments << message->text().replace(QLatin1String("\n"), QLatin1String(" "));
loggerDialog.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
logModePluginsLoader.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
logModePluginsLoader.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
main.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
main.cpp:                     i18n("(C) 2021, J.D. Nicholson, (C) 2007-2015, Nicolas Ternisien"),
main.cpp:                    QStringLiteral("http://www.forum-software.org"));
main.cpp:    QApplication::setWindowIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/viewer.svg")));
main.cpp:                // LogManager* firstLogManager = d->tabs->createTab();
main.cpp:                // d->tabs->load(Globals::instance().findLogMode("openLogMode"), firstLogManager);
main.cpp:                // Open log mode need to automatically find the passed url : args->url(i)
mainWindow.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
mainWindow.cpp:    d->printer = NULL;
mainWindow.cpp:    d->detailDialog = NULL;
mainWindow.cpp:    d->configurationDialog = NULL;
mainWindow.cpp:    d->tabs = NULL;
mainWindow.cpp:    d->statusBar = NULL;
mainWindow.cpp:    // d->tabs is the tab bar that isn't normally visible until you have multiple tabs
mainWindow.cpp:    d->tabs->setIconSize(QSize(48,48));
mainWindow.cpp:    d->configurationDialog = new ConfigurationDialog(this);
mainWindow.cpp:    connect(d->configurationDialog, &ConfigurationDialog::configurationSaved, d->tabs, &TabLogViewsWidget::reloadAll);
mainWindow.cpp:    LogManager *firstLogManager = d->tabs->createTab();
mainWindow.cpp:            if (mode->filesExist()) {
mainWindow.cpp:                d->tabs->load(mode, firstLogManager);
mainWindow.cpp:                logWarning() << mode->name() << "is selected by default, but log files do not exist.";
mainWindow.cpp:    firstLogManager->usedView()->logViewWidget()->setFocus();
mainWindow.cpp:     // toolbarlist[1]->setIconSize(QSize(48,48));
mainWindow.cpp:     // toolbarlist[2]->setIconSize(QSize(48,48));
mainWindow.cpp:    d->tabs = new TabLogViewsWidget();
mainWindow.cpp:    connect(d->tabs, &TabLogViewsWidget::statusBarChanged, this, &MainWindow::changeStatusBar);
mainWindow.cpp:    connect(d->tabs, &TabLogViewsWidget::logManagerCreated, this,
mainWindow.cpp:    connect(d->tabs, &QTabWidget::currentChanged, this, &MainWindow::changeCurrentTab);
mainWindow.cpp:    setCentralWidget(d->tabs);
mainWindow.cpp:    // Assuming that d->tabs is actually the toolbar (NICE!)
mainWindow.cpp:    // d->tabs->setIconSize(QSize(96,96));
mainWindow.cpp:    delete d->loggedDialog;
mainWindow.cpp:    delete d->detailDialog;
mainWindow.cpp:    delete d->configurationDialog;
mainWindow.cpp:    d->statusBar = new KSystemLog::StatusBar(this);
mainWindow.cpp:    setStatusBar(d->statusBar);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->reloadAction);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->selectAllAction);
mainWindow.cpp:    separator->setSeparator(true);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(separator);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->copyAction);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->saveAction);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->sendMailAction);
mainWindow.cpp:    separator->setSeparator(true);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(separator);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->tooltipEnabledAction);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->newLinesDisplayedAction);
mainWindow.cpp:    separator->setSeparator(true);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(separator);
mainWindow.cpp:    manager->usedView()->logViewWidget()->addAction(d->detailAction);
mainWindow.cpp:    // Assuming that d->tabs is actually the toolbar (NICE!)
mainWindow.cpp:    manager->usedView()->logViewWidget()->setIconSize(QSize(48,48));
mainWindow.cpp:    connect(manager->usedView(), &View::searchFilterChanged, this, &MainWindow::updateStatusBar);
mainWindow.cpp:    connect(manager->usedView()->logViewWidget(), &QTreeWidget::itemDoubleClicked, this,
mainWindow.cpp:    connect(manager->usedView()->logViewWidget(), &QTreeWidget::itemSelectionChanged, this,
mainWindow.cpp:    connect(manager->usedView()->logViewWidget()->model(), &LogViewModel::processingMultipleInsertions, this,
mainWindow.cpp:    LogManager *currentManager = d->tabs->activeLogManager();
mainWindow.cpp:    if (d->detailDialog != NULL) {
mainWindow.cpp:        d->detailDialog->selectionChanged(currentManager->usedView()->logViewWidget());
mainWindow.cpp:    LogManager *currentLogManager = d->tabs->activeLogManager();
mainWindow.cpp:    bool selection = currentLogManager->usedView()->logViewWidget()->hasItemsSelected();
mainWindow.cpp:    d->copyAction->setEnabled(selection);
mainWindow.cpp:    d->saveAction->setEnabled(selection);
mainWindow.cpp:    d->detailAction->setEnabled(selection);
mainWindow.cpp:    d->sendMailAction->setEnabled(selection);
mainWindow.cpp:    d->printAction->setEnabled(selection);
mainWindow.cpp:    View *currentView = d->tabs->activeLogManager()->usedView();
mainWindow.cpp:    bool enabled = !currentView->logViewWidget()->model()->isProcessingMultipleInsertions();
mainWindow.cpp:    d->reloadAction->setEnabled(enabled);
mainWindow.cpp:    d->resumePauseAction->setEnabled(enabled);
mainWindow.cpp:    d->findAction->setEnabled(enabled);
mainWindow.cpp:    d->findNextAction->setEnabled(enabled);
mainWindow.cpp:    d->findPreviousAction->setEnabled(enabled);
mainWindow.cpp:    // d->logModesActionGroup->setEnabled(enabled);
mainWindow.cpp:    d->tabs->changeReloadingTab(currentView, !enabled);
mainWindow.cpp:        logModeAction->actionMenu()->setEnabled(enabled);
mainWindow.cpp:    LogManager *currentLogManager = d->tabs->activeLogManager();
mainWindow.cpp:        currentLogManager->stopWatching();
mainWindow.cpp:    KSystemLogConfig::self()->save();
mainWindow.cpp:    return d->tabs;
mainWindow.cpp:    if (d->detailDialog == NULL) {
mainWindow.cpp:        d->detailDialog = new DetailDialog(this);
mainWindow.cpp:    d->detailDialog->show();
mainWindow.cpp:    foreach (LogManager *manager, d->tabs->logManagers()) {
mainWindow.cpp:        manager->usedView()->logViewWidget()->toggleToolTip(enabled);
mainWindow.cpp:    LogManager *currentManager = d->tabs->activeLogManager();
mainWindow.cpp:    int itemCount = currentManager->usedView()->logViewWidget()->itemCount();
mainWindow.cpp:    int notHiddenItemCount = currentManager->usedView()->logViewWidget()->notHiddenItemCount();
mainWindow.cpp:        d->statusBar->changeLineCountMessage(
mainWindow.cpp:                   currentManager->usedView()->logViewWidget()->itemCount()));
mainWindow.cpp:        d->statusBar->changeLineCountMessage(i18ncp("Line not hidden by search / Total displayed lines",
mainWindow.cpp:    d->statusBar->changeLastModification(currentManager->lastUpdate());
mainWindow.cpp:    LogManager *currentLogManager = d->tabs->activeLogManager();
mainWindow.cpp:        currentLogManager->setParsingPaused(paused);
mainWindow.cpp:        d->resumePauseAction->setText(i18n("Resu&me"));
mainWindow.cpp:        d->resumePauseAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/start.svg")));
mainWindow.cpp:        d->resumePauseAction->setToolTip(i18n("Resume the watching of the current log"));
mainWindow.cpp:        d->resumePauseAction->setWhatsThis(
mainWindow.cpp:        d->resumePauseAction->setChecked(true);
mainWindow.cpp:        actionCollection()->setDefaultShortcut(d->resumePauseAction, Qt::CTRL + Qt::Key_M);
mainWindow.cpp:        d->resumePauseAction->setText(i18n("S&top"));
mainWindow.cpp:        d->resumePauseAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/stop.svg")));
mainWindow.cpp:        d->resumePauseAction->setToolTip(i18n("Pause the watching of the current log"));
mainWindow.cpp:        d->resumePauseAction->setWhatsThis(i18n(
mainWindow.cpp:        d->resumePauseAction->setChecked(false);
mainWindow.cpp:        actionCollection()->setDefaultShortcut(d->resumePauseAction, Qt::CTRL + Qt::Key_P);
mainWindow.cpp:    foreach (QWidget *widget, d->resumePauseAction->associatedWidgets()) {
mainWindow.cpp:        if (widget->sizeHint().width() > widget->size().width()) {
mainWindow.cpp:            widget->setMinimumSize(widget->sizeHint());
mainWindow.cpp:    d->tabs->load(Globals::instance().findLogMode(QStringLiteral("openLogMode")), d->tabs->activeLogManager());
mainWindow.cpp:    d->configurationDialog->showConfiguration();
mainWindow.cpp:    if (d->loggedDialog == NULL) {
mainWindow.cpp:        d->loggedDialog = new LoggerDialog(this);
mainWindow.cpp:    d->loggedDialog->initialize();
mainWindow.cpp:    d->loggedDialog->exec();
mainWindow.cpp:    d->statusBar->changeMessage(text);
mainWindow.cpp:    LogManager *currentManager = d->tabs->activeLogManager();
mainWindow.cpp:        = !currentManager->usedView()->logViewWidget()->model()->isProcessingMultipleInsertions();
mainWindow.cpp:    if (currentManager->logMode() == NULL) {
mainWindow.cpp:        changeWindowTitle(currentManager->title());
mainWindow.cpp:        d->reloadAction->setEnabled(true);
mainWindow.cpp:        d->resumePauseAction->setEnabled(true);
mainWindow.cpp:        d->reloadAction->setEnabled(false);
mainWindow.cpp:        d->resumePauseAction->setEnabled(false);
mainWindow.cpp:    if (currentManager->isParsingPaused())
mainWindow.cpp:    logDebug() << "Toggling filter bar..." << d->filterBarAction->isChecked();
mainWindow.cpp:    foreach (LogManager *manager, d->tabs->logManagers()) {
mainWindow.cpp:        manager->usedView()->toggleLogViewFilter(d->filterBarAction->isChecked());
mainWindow.cpp:    KSystemLogConfig::setToggleFilterBar(d->filterBarAction->isChecked());
mainWindow.cpp:    d->tabs->activeLogManager()->usedView()->logViewSearch()->findNext();
mainWindow.cpp:    d->tabs->activeLogManager()->usedView()->logViewSearch()->findPrevious();
mainWindow.cpp:    LogManager *activeLogManager = d->tabs->activeLogManager();
mainWindow.cpp:    foreach (LogManager *manager, d->tabs->logManagers()) {
mainWindow.cpp:            manager->usedView()->toggleLogViewSearch(true);
mainWindow.cpp:    d->tabs->activeLogManager()->usedView()->toggleLogViewSearch(true);
mainWindow.cpp:    QAction *fileOpenAction = actionCollection()->addAction(KStandardAction::Open, this, SLOT(fileOpen()));
mainWindow.cpp:    fileOpenAction->setToolTip(i18n("Open a file in KSystemLog"));
mainWindow.cpp:    fileOpenAction->setWhatsThis(
mainWindow.cpp:    d->printAction = actionCollection()->addAction(KStandardAction::Print);
mainWindow.cpp:    d->printAction->setText(i18n("&Print Selection..."));
mainWindow.cpp:    d->printAction->setToolTip(i18n("Print the selection"));
mainWindow.cpp:    d->printAction->setWhatsThis(i18n(
mainWindow.cpp:    d->printAction->setEnabled(false);
mainWindow.cpp:    d->saveAction = actionCollection()->addAction(KStandardAction::SaveAs);
mainWindow.cpp:    d->saveAction->setToolTip(i18n("Save the selection to a file"));
mainWindow.cpp:    d->saveAction->setWhatsThis(
mainWindow.cpp:    d->saveAction->setEnabled(false);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->saveAction, Qt::CTRL + Qt::Key_S);
mainWindow.cpp:    QAction *fileQuitAction = actionCollection()->addAction(KStandardAction::Quit, qApp, SLOT(quit()));
mainWindow.cpp:    fileQuitAction->setToolTip(i18n("Quit KSystemLog"));
mainWindow.cpp:    fileQuitAction->setWhatsThis(i18n("Quits KSystemLog."));
mainWindow.cpp:    d->copyAction = actionCollection()->addAction(KStandardAction::Copy);
mainWindow.cpp:    d->copyAction->setToolTip(i18n("Copy the selection to the clipboard"));
mainWindow.cpp:    d->copyAction->setWhatsThis(i18n(
mainWindow.cpp:    d->copyAction->setEnabled(false);
mainWindow.cpp:    d->expandAllAction = actionCollection()->addAction(QStringLiteral("expand_all"));
mainWindow.cpp:    d->expandAllAction->setText(i18n("Ex&pand All"));
mainWindow.cpp:    d->expandAllAction->setToolTip(i18n("Expand all categories"));
mainWindow.cpp:    d->expandAllAction->setWhatsThis(i18n(
mainWindow.cpp:    d->expandAllAction->setEnabled(false);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->expandAllAction, Qt::CTRL + Qt::Key_X);
mainWindow.cpp:    d->collapseAllAction = actionCollection()->addAction(QStringLiteral("collapse_all"));
mainWindow.cpp:    d->collapseAllAction->setText(i18n("Col&lapse All"));
mainWindow.cpp:    d->collapseAllAction->setToolTip(i18n("Collapse all categories"));
mainWindow.cpp:    d->collapseAllAction->setWhatsThis(i18n(
mainWindow.cpp:    d->collapseAllAction->setEnabled(false);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->collapseAllAction, Qt::CTRL + Qt::Key_L);
mainWindow.cpp:    d->sendMailAction = actionCollection()->addAction(QStringLiteral("send_mail"));
mainWindow.cpp:    d->sendMailAction->setText(i18n("&Email Selection..."));
mainWindow.cpp:    d->sendMailAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/new.svg")));
mainWindow.cpp:    d->sendMailAction->setToolTip(i18n("Send the selection by mail"));
mainWindow.cpp:    d->sendMailAction->setWhatsThis(i18n(
mainWindow.cpp:    d->sendMailAction->setEnabled(false);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->sendMailAction, Qt::CTRL + Qt::Key_M);
mainWindow.cpp:    d->logMessageAction
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("log_message"), this, SLOT(showLogMessageDialog()));
mainWindow.cpp:    d->logMessageAction->setText(i18n("&Add Log Entry..."));
mainWindow.cpp:    d->logMessageAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/new.svg")));
mainWindow.cpp:    d->logMessageAction->setShortcut(Qt::CTRL + Qt::Key_L);
mainWindow.cpp:    d->logMessageAction->setToolTip(i18n("Add a log entry to the log system"));
mainWindow.cpp:    d->logMessageAction->setWhatsThis(
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->logMessageAction, Qt::CTRL + Qt::Key_L);
mainWindow.cpp:    d->selectAllAction = actionCollection()->addAction(KStandardAction::SelectAll);
mainWindow.cpp:    d->selectAllAction->setToolTip(i18n("Select all lines of the current log"));
mainWindow.cpp:    d->selectAllAction->setWhatsThis(i18n(
mainWindow.cpp:    d->findAction = actionCollection()->addAction(KStandardAction::Find, this, SLOT(showSearchBar()));
mainWindow.cpp:    d->findNextAction = actionCollection()->addAction(KStandardAction::FindNext, this, SLOT(findNext()));
mainWindow.cpp:    d->findPreviousAction
mainWindow.cpp:        = actionCollection()->addAction(KStandardAction::FindPrev, this, SLOT(findPrevious()));
mainWindow.cpp:    actionCollection()->addAction(KStandardAction::Preferences, this, SLOT(showConfigurationDialog()));
mainWindow.cpp:    d->filterBarAction
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("show_quick_filter"), this, SLOT(toggleFilterBar()));
mainWindow.cpp:    d->filterBarAction->setText(i18n("Show &Filter Bar"));
mainWindow.cpp:    d->filterBarAction->setEnabled(true);
mainWindow.cpp:    d->filterBarAction->setCheckable(true);
mainWindow.cpp:    d->filterBarAction->setChecked(KSystemLogConfig::toggleFilterBar());
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("new_tab"), d->tabs, SLOT(createTab()));
mainWindow.cpp:    newTabAction->setText(i18n("&New Tab"));
mainWindow.cpp:    newTabAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/new.png")));
mainWindow.cpp:    newTabAction->setToolTip(i18n("Create a new tab"));
mainWindow.cpp:    newTabAction->setWhatsThis(i18n("Creates a new tab which can display another log."));
mainWindow.cpp:    d->tabs->addAction(newTabAction);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(newTabAction, Qt::CTRL + Qt::Key_T);
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("/usr/local/share/icons/logavista/close_tab.svg"), d->tabs, SLOT(closeTab()));
mainWindow.cpp:    closeTabAction->setText(i18n("&Close Tab"));
mainWindow.cpp:    closeTabAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/close.svg")));
mainWindow.cpp:    closeTabAction->setToolTip(i18n("Close the current tab"));
mainWindow.cpp:    closeTabAction->setWhatsThis(i18n("Closes the current tab."));
mainWindow.cpp:    d->tabs->addAction(closeTabAction);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(closeTabAction, Qt::CTRL + Qt::Key_W);
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("duplicate_tab"), d->tabs, SLOT(duplicateTab()));
mainWindow.cpp:    duplicateTabAction->setText(i18n("&Duplicate Tab"));
mainWindow.cpp:    duplicateTabAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/duplicate.png")));
mainWindow.cpp:    duplicateTabAction->setToolTip(i18n("Duplicate the current tab"));
mainWindow.cpp:    duplicateTabAction->setWhatsThis(i18n("Duplicates the current tab."));
mainWindow.cpp:    d->tabs->addAction(duplicateTabAction);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(duplicateTabAction, Qt::SHIFT + Qt::CTRL + Qt::Key_N);
mainWindow.cpp:    separatorAction->setSeparator(true);
mainWindow.cpp:    d->tabs->addAction(separatorAction);
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("/usr/local/share/icons/logavista/move_tab_left.svg"), d->tabs, SLOT(moveTabLeft()));
mainWindow.cpp:    moveTabLeftAction->setText(i18n("Move Tab &Left"));
mainWindow.cpp:    moveTabLeftAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/left.svg")));
mainWindow.cpp:    moveTabLeftAction->setToolTip(i18n("Move the current tab to the left"));
mainWindow.cpp:    moveTabLeftAction->setWhatsThis(i18n("Moves the current tab to the left."));
mainWindow.cpp:    d->tabs->addAction(moveTabLeftAction);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(moveTabLeftAction, Qt::SHIFT + Qt::CTRL + Qt::Key_Left);
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("move_tab_right"), d->tabs, SLOT(moveTabRight()));
mainWindow.cpp:    moveTabRightAction->setText(i18n("Move Tab &Right"));
mainWindow.cpp:    moveTabRightAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/right.svg")));
mainWindow.cpp:    moveTabRightAction->setToolTip(i18n("Move the current tab to the right"));
mainWindow.cpp:    moveTabRightAction->setWhatsThis(i18n("Moves the current tab to the right."));
mainWindow.cpp:    d->tabs->addAction(moveTabRightAction);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(moveTabRightAction, Qt::SHIFT + Qt::CTRL + Qt::Key_Right);
mainWindow.cpp:    d->reloadAction = actionCollection()->addAction(QStringLiteral("reload"), d->tabs, SLOT(reloadCurrent()));
mainWindow.cpp:    d->reloadAction->setText(i18n("&Reload"));
mainWindow.cpp:    d->reloadAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/refresh.svg")));
mainWindow.cpp:    d->reloadAction->setToolTip(i18n("Reload the current log"));
mainWindow.cpp:    d->reloadAction->setWhatsThis(
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->reloadAction, Qt::Key_F5);
mainWindow.cpp:    d->resumePauseAction = actionCollection()->addAction(QStringLiteral("resume_pause_parsing"));
mainWindow.cpp:    d->resumePauseAction->setCheckable(true);
mainWindow.cpp:    connect(d->resumePauseAction, &QAction::toggled, this, &MainWindow::changeResumePauseAction);
mainWindow.cpp:    connect(d->resumePauseAction, &QAction::toggled, this, &MainWindow::toggleResumePauseParsing);
mainWindow.cpp:    d->detailAction
mainWindow.cpp:        = actionCollection()->addAction(QStringLiteral("details"), this, SLOT(showDetailsDialog()));
mainWindow.cpp:    d->detailAction->setText(i18n("&Details"));
mainWindow.cpp:    d->detailAction->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/preview.png")));
mainWindow.cpp:    d->detailAction->setToolTip(i18n("Display details on the selected line"));
mainWindow.cpp:    d->detailAction->setWhatsThis(i18n(
mainWindow.cpp:    d->detailAction->setEnabled(false);
mainWindow.cpp:    actionCollection()->setDefaultShortcut(d->detailAction, Qt::ALT + Qt::Key_Return);
mainWindow.cpp:    d->tooltipEnabledAction = actionCollection()->addAction(QStringLiteral("tooltipEnabled"));
mainWindow.cpp:    d->tooltipEnabledAction->setText(i18n("&Enable Detailed Tooltips"));
mainWindow.cpp:    d->tooltipEnabledAction->setToolTip(i18n("Disable/Enable the tooltip on the current view"));
mainWindow.cpp:    d->tooltipEnabledAction->setWhatsThis(
mainWindow.cpp:    d->tooltipEnabledAction->setCheckable(true);
mainWindow.cpp:    d->tooltipEnabledAction->setChecked(KSystemLogConfig::tooltipEnabled());
mainWindow.cpp:    connect(d->tooltipEnabledAction, &QAction::toggled, this, &MainWindow::toggleItemTooltip);
mainWindow.cpp:    d->newLinesDisplayedAction = actionCollection()->addAction(QStringLiteral("newLinesDisplayed"));
mainWindow.cpp:    d->newLinesDisplayedAction->setText(i18n("&Scroll to New Lines"));
mainWindow.cpp:    d->newLinesDisplayedAction->setToolTip(i18n("Scrolls or not to the new lines when the log changes"));
mainWindow.cpp:    d->newLinesDisplayedAction->setWhatsThis(
mainWindow.cpp:    d->newLinesDisplayedAction->setCheckable(true);
mainWindow.cpp:    d->newLinesDisplayedAction->setChecked(KSystemLogConfig::newLinesDisplayed());
mainWindow.cpp:    connect(d->newLinesDisplayedAction, &QAction::toggled, this, &MainWindow::toggleNewLinesDisplaying);
mainWindow.cpp:    connect(d->expandAllAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::expandAllCurrentView);
mainWindow.cpp:    connect(d->collapseAllAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::collapseAllCurrentView);
mainWindow.cpp:    connect(d->saveAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::fileSaveCurrentView);
mainWindow.cpp:    connect(d->copyAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::copyToClipboardCurrentView);
mainWindow.cpp:    connect(d->sendMailAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::sendMailCurrentView);
mainWindow.cpp:    connect(d->printAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::printSelectionCurrentView);
mainWindow.cpp:    connect(d->selectAllAction, &QAction::triggered, d->tabs, &TabLogViewsWidget::selectAllCurrentView);
mainWindow.cpp:    ActionData actionData = action->data().value<ActionData>();
mainWindow.cpp:        if (logMode->id() == selectedModeId) {
mainWindow.cpp:    logDebug() << "Selecting " << currentMode->name() << " (" << currentMode->id() << ")";
mainWindow.cpp:    d->tabs->load(currentMode, d->tabs->activeLogManager(), actionData.analyzerOptions);
mainWindow.cpp:        QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/services.svg")), i18n("Services"), this);
mainWindow.cpp:        = new KActionMenu(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/other.svg")), i18n("Others"), this);
mainWindow.cpp:        = new KActionMenu(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/tools.svg")), i18n("MX_Linux"), this);
mainWindow.cpp:        if (logModeAction->category() == LogModeAction::RootCategory) {
mainWindow.cpp:            menuLogModeActions.append(logModeAction->actionMenu());
mainWindow.cpp:        } else if (logModeAction->category() == LogModeAction::ServicesCategory) {
mainWindow.cpp:            servicesAction->addAction(logModeAction->actionMenu());
mainWindow.cpp:        } else if (logModeAction->category() == LogModeAction::OthersCategory) {
mainWindow.cpp:            othersAction->addAction(logModeAction->actionMenu());
mainWindow.cpp:        } else if (logModeAction->category() == LogModeAction::MX_LinuxCategory) {
mainWindow.cpp:            mxlinuxAction->addAction(logModeAction->actionMenu());
mainWindow.cpp:        foreach (QAction *action, logModeAction->innerActions()) {
mainWindow.cpp:            ActionData actionData = action->data().value<ActionData>();
mainWindow.cpp:                action = actionCollection()->addAction(actionData.id, action);
mainWindow.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidConfigurationWidget.h:        this->setLayout(layout);
modes/acpid/acpidConfigurationWidget.h:        layout->addWidget(fileList);
modes/acpid/acpidConfigurationWidget.h:                                                     ->logModeConfiguration<AcpidConfiguration *>();
modes/acpid/acpidConfigurationWidget.h:        acpidConfiguration->setAcpidPaths(fileList->paths());
modes/acpid/acpidConfigurationWidget.h:                                                     ->logModeConfiguration<AcpidConfiguration *>();
modes/acpid/acpidConfigurationWidget.h:        fileList->removeAllItems();
modes/acpid/acpidConfigurationWidget.h:        fileList->addPaths(acpidConfiguration->acpidPaths());
modes/acpid/acpidConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/acpid/acpidConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidFactory.cpp:    if (!logMode->filesExist())
modes/acpid/acpidFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/acpid/acpidFactory.cpp:    logModeAction->setCategory(LogModeAction::OthersCategory);
modes/acpid/acpidConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("AcpidLogMode"));
modes/acpid/acpidConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->acpidPaths, defaultAcpidPaths,
modes/acpid/acpidConfiguration.h:    QStringList acpidPaths() const { return d->acpidPaths; }
modes/acpid/acpidConfiguration.h:    void setAcpidPaths(const QStringList &acpidPaths) { d->acpidPaths = acpidPaths; }
modes/acpid/acpidLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidLogMode.h:// #define ACPID_MODE_ICON "preferences-system-power-management"
modes/acpid/acpidLogMode.h:#define ACPID_MODE_ICON "/usr/local/share/icons/logavista/management.png"
modes/acpid/acpidItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidAnalyzer.h:        if (dateBegin == -1 || dateEnd == -1) {
modes/acpid/acpidAnalyzer.h:            QString strDate = line.mid(dateBegin + 1, dateEnd - dateBegin - 1);
modes/acpid/acpidAnalyzer.h:            date = QDate(year.toInt(), ParsingHelper::instance()->parseSyslogMonth(month), day.toInt());
modes/acpid/acpidAnalyzer.h:            if (endType == -1) {
modes/acpid/acpidAnalyzer.h:                type = line.left(endType - 1);
modes/acpid/acpidAnalyzer.h:                message = line.left(line.length() - 2);
modes/acpid/acpidFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidLogMode.cpp:    d->logModeConfiguration = QSharedPointer<AcpidConfiguration>(new AcpidConfiguration());
modes/acpid/acpidLogMode.cpp:    d->logModeConfigurationWidget = new AcpidConfigurationWidget();
modes/acpid/acpidLogMode.cpp:    d->itemBuilder = new AcpidItemBuilder();
modes/acpid/acpidLogMode.cpp:    d->action = createDefaultAction();
modes/acpid/acpidLogMode.cpp:    d->action->setToolTip(i18n("Display the ACPI log."));
modes/acpid/acpidLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/acpid/acpidLogMode.cpp:    checkLogFilesPresence(configuration->acpidPaths());
modes/acpid/acpidLogMode.cpp:    return configuration->findNoModeLogFiles(configuration->acpidPaths());
modes/acpid/acpidAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/acpid/acpidItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/acpid/acpidItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/acpid/acpidItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/formatusb/formatusbLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbLogMode.cpp:    d->logModeConfiguration = QSharedPointer<FormatusbConfiguration>(new FormatusbConfiguration());
modes/formatusb/formatusbLogMode.cpp:    d->logModeConfigurationWidget = new FormatusbConfigurationWidget();
modes/formatusb/formatusbLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/formatusb/formatusbLogMode.cpp:    d->action = createDefaultAction();
modes/formatusb/formatusbLogMode.cpp:    d->action->setToolTip(i18n("Formatusb log /var/log/formatusb.log*"));
modes/formatusb/formatusbLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/formatusb/formatusbLogMode.cpp:    checkLogFilesPresence(configuration->formatusbPaths());
modes/formatusb/formatusbLogMode.cpp:    return configuration->findGenericLogFiles(configuration->formatusbPaths());
modes/formatusb/formatusbConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbConfigurationWidget.h:        this->setLayout(layout);
modes/formatusb/formatusbConfigurationWidget.h:        layout->addWidget(fileList);
modes/formatusb/formatusbConfigurationWidget.h:                                                       ->logModeConfiguration<FormatusbConfiguration *>();
modes/formatusb/formatusbConfigurationWidget.h:        formatusbConfiguration->setFormatusbPaths(fileList->paths());
modes/formatusb/formatusbConfigurationWidget.h:                                                       ->logModeConfiguration<FormatusbConfiguration *>();
modes/formatusb/formatusbConfigurationWidget.h:        fileList->removeAllItems();
modes/formatusb/formatusbConfigurationWidget.h:        fileList->addPaths(formatusbConfiguration->formatusbPaths());
modes/formatusb/formatusbConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/formatusb/formatusbLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbLogMode.h:#define FORMATUSB_MODE_ICON "/usr/local/share/icons/logavista/scsi.svg"
modes/formatusb/formatusbAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbFactory.cpp:    if (!logMode->filesExist())
modes/formatusb/formatusbFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/formatusb/formatusbConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbAnalyzer.h:        QString message = syslogLine->logItems().at(syslogLine->logItems().count() - 1);
modes/formatusb/formatusbAnalyzer.h://              syslogLine->setLogLevel(Globals::instance().errorLogLevel());
modes/formatusb/formatusbAnalyzer.h://              syslogLine->setLogLevel(Globals::instance().warningLogLevel());
modes/formatusb/formatusbAnalyzer.h://             = logMode->logModeConfiguration<FormatusbConfiguration *>();
modes/formatusb/formatusbAnalyzer.h://         return hasKeywords(message, configuration->warningKeywords());
modes/formatusb/formatusbAnalyzer.h://             = logMode->logModeConfiguration<FormatusbConfiguration *>();
modes/formatusb/formatusbAnalyzer.h://         return hasKeywords(message, configuration->errorKeywords());
modes/formatusb/formatusbConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/formatusb/formatusbConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("FormatusbLogMode"));
modes/formatusb/formatusbConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/formatusb.log.* | head -n 2 \"";
modes/formatusb/formatusbConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->formatusbPaths, defaultFormatusbPaths,
modes/formatusb/formatusbConfiguration.h:    QStringList formatusbPaths() const { return d->formatusbPaths; }
modes/formatusb/formatusbConfiguration.h:    void setFormatusbPaths(const QStringList &formatusbPaths) { d->formatusbPaths = formatusbPaths; }
modes/formatusb/formatusbFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerFactory.cpp:    if (!logMode->filesExist())
modes/mx_live_usb_maker/mx_live_usb_makerFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/mx_live_usb_maker/mx_live_usb_makerFactory.cpp:    logModeAction->setCategory(LogModeAction::MX_LinuxCategory);
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.h:#define MX_LIVE_USB_MAKER_MODE_ICON "/usr/local/share/icons/logavista/maker.svg"
modes/mx_live_usb_maker/mx_live_usb_makerFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("Mx_live_usb_makerLogMode"));
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/mx_live_usb_maker/security.report.* | head -n 1 \"";
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->mx_live_usb_makerPaths, defaultMx_live_usb_makerPaths,
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h:    QStringList mx_live_usb_makerPaths() const { return d->mx_live_usb_makerPaths; }
modes/mx_live_usb_maker/mx_live_usb_makerConfiguration.h:    void setMx_live_usb_makerPaths(const QStringList &mx_live_usb_makerPaths) { d->mx_live_usb_makerPaths = mx_live_usb_makerPaths; }
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        this->setLayout(layout);
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        layout->addWidget(fileList);
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_live_usb_makerConfiguration *>();
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        mx_live_usb_makerConfiguration->setMx_live_usb_makerPaths(fileList->paths());
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_live_usb_makerConfiguration *>();
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        fileList->removeAllItems();
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        fileList->addPaths(mx_live_usb_makerConfiguration->mx_live_usb_makerPaths());
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->logModeConfiguration = QSharedPointer<Mx_live_usb_makerConfiguration>(new Mx_live_usb_makerConfiguration());
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->logModeConfigurationWidget = new Mx_live_usb_makerConfigurationWidget();
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->action = createDefaultAction();
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->action->setToolTip(i18n("Mx_live_usb_maker security audit logs /var/log/mx_live_usb_maker/security.report.*"));
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    checkLogFilesPresence(configuration->mx_live_usb_makerPaths());
modes/mx_live_usb_maker/mx_live_usb_makerLogMode.cpp:    return configuration->findGenericLogFiles(configuration->mx_live_usb_makerPaths());
modes/mx_live_usb_maker/mx_live_usb_makerConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgAnalyzer.cpp:    list.append(logLineType->name());
modes/xorg/xorgAnalyzer.cpp:    xorgLevels[QStringLiteral("(--)")] = new LogLevel(
modes/xorg/xorgConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgConfigurationWidget.h:        this->setLayout(layout);
modes/xorg/xorgConfigurationWidget.h:        layout->addWidget(fileList);
modes/xorg/xorgConfigurationWidget.h:                                                   ->logModeConfiguration<XorgConfiguration *>();
modes/xorg/xorgConfigurationWidget.h:        xorgConfiguration->setXorgPaths(fileList->paths());
modes/xorg/xorgConfigurationWidget.h:                                                   ->logModeConfiguration<XorgConfiguration *>();
modes/xorg/xorgConfigurationWidget.h:        fileList->removeAllItems();
modes/xorg/xorgConfigurationWidget.h:        fileList->addPaths(xorgConfiguration->xorgPaths());
modes/xorg/xorgConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/xorg/xorgItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgLogMode.cpp:    d->logModeConfiguration = QSharedPointer<XorgConfiguration>(new XorgConfiguration());
modes/xorg/xorgLogMode.cpp:    d->logModeConfigurationWidget = new XorgConfigurationWidget();
modes/xorg/xorgLogMode.cpp:    d->itemBuilder = new XorgItemBuilder();
modes/xorg/xorgLogMode.cpp:    d->action = createDefaultAction();
modes/xorg/xorgLogMode.cpp:    d->action->setToolTip(i18n("Display the X.org log."));
modes/xorg/xorgLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/xorg/xorgLogMode.cpp:    checkLogFilesPresence(configuration->xorgPaths());
modes/xorg/xorgLogMode.cpp:    return configuration->findNoModeLogFiles(configuration->xorgPaths());
modes/xorg/xorgAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgAnalyzer.h:#define DEFAULT_SETTING_LOG_LEVEL_ICON "configure-toolbars"
modes/xorg/xorgAnalyzer.h:#define NOT_IMPLEMENTED_LOG_LEVEL_ICON "document-new"
modes/xorg/xorgLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgFactory.cpp:    if (!logMode->filesExist())
modes/xorg/xorgFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/xorg/xorgFactory.cpp:    logModeAction->setCategory(LogModeAction::ServicesCategory);
modes/xorg/xorgConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("XorgLogMode"));
modes/xorg/xorgConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->xorgPaths, defaultXorgPaths,
modes/xorg/xorgConfiguration.h:    QStringList xorgPaths() const { return d->xorgPaths; }
modes/xorg/xorgConfiguration.h:    void setXorgPaths(const QStringList &xorgPaths) { d->xorgPaths = xorgPaths; }
modes/xorg/xorgItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xorg/xorgItemBuilder.h:        LogLine *line = item->logLine();
modes/xorg/xorgItemBuilder.h:        item->setText(0, QLatin1String(""));
modes/xorg/xorgItemBuilder.h:        foreach (const QString &label, line->logItems()) {
modes/xorg/xorgItemBuilder.h:            item->setText(i, label);
modes/xorg/xorgItemBuilder.h:        item->setIcon(0, line->logLevel()->pixmap());
modes/xorg/xorgItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/xorg/xorgItemBuilder.h:        result.append(labelMessageFormat(i18n("Original file:"), line->sourceFileName()));
modes/mx_snapshot/mx_snapshotConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("Mx_snapshotLogMode"));
modes/mx_snapshot/mx_snapshotConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/mx_snapshot/security.report.* | head -n 1 \"";
modes/mx_snapshot/mx_snapshotConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->mx_snapshotPaths, defaultMx_snapshotPaths,
modes/mx_snapshot/mx_snapshotConfiguration.h:    QStringList mx_snapshotPaths() const { return d->mx_snapshotPaths; }
modes/mx_snapshot/mx_snapshotConfiguration.h:    void setMx_snapshotPaths(const QStringList &mx_snapshotPaths) { d->mx_snapshotPaths = mx_snapshotPaths; }
modes/mx_snapshot/mx_snapshotConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        this->setLayout(layout);
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        layout->addWidget(fileList);
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_snapshotConfiguration *>();
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        mx_snapshotConfiguration->setMx_snapshotPaths(fileList->paths());
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_snapshotConfiguration *>();
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        fileList->removeAllItems();
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        fileList->addPaths(mx_snapshotConfiguration->mx_snapshotPaths());
modes/mx_snapshot/mx_snapshotConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/mx_snapshot/mx_snapshotFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->logModeConfiguration = QSharedPointer<Mx_snapshotConfiguration>(new Mx_snapshotConfiguration());
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->logModeConfigurationWidget = new Mx_snapshotConfigurationWidget();
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->action = createDefaultAction();
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->action->setToolTip(i18n("Mx_snapshot security audit logs /var/log/mx_snapshot/security.report.*"));
modes/mx_snapshot/mx_snapshotLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/mx_snapshot/mx_snapshotLogMode.cpp:    checkLogFilesPresence(configuration->mx_snapshotPaths());
modes/mx_snapshot/mx_snapshotLogMode.cpp:    return configuration->findGenericLogFiles(configuration->mx_snapshotPaths());
modes/mx_snapshot/mx_snapshotFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotFactory.cpp:    if (!logMode->filesExist())
modes/mx_snapshot/mx_snapshotFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/mx_snapshot/mx_snapshotFactory.cpp:    logModeAction->setCategory(LogModeAction::MX_LinuxCategory);
modes/mx_snapshot/mx_snapshotLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_snapshot/mx_snapshotLogMode.h:#define MX_SNAPSHOT_MODE_ICON "/usr/local/share/icons/logavista/snapshot.svg"
modes/open/openLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/open/openLogMode.h:#define OPEN_MODE_ICON "/usr/local/share/icons/logavista/open.svg"
modes/open/openLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/open/openLogMode.cpp:    d->logModeConfigurationWidget = NULL;
modes/open/openLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/open/openLogMode.cpp:    d->action = NULL;
modes/open/openAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/open/openFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/open/openFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/open/openAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheConfigurationWidget.h:        this->setLayout(layout);
modes/apache/apacheConfigurationWidget.h:        apachePathsId = apacheFileList->addCategory(i18n("Apache Log Files"), i18n("Add Apache File..."));
modes/apache/apacheConfigurationWidget.h:            = apacheFileList->addCategory(i18n("Apache Access Log Files"), i18n("Add Apache Access File..."));
modes/apache/apacheConfigurationWidget.h:        layout->addWidget(apacheFileList);
modes/apache/apacheConfigurationWidget.h:                                                       ->logModeConfiguration<ApacheConfiguration *>();
modes/apache/apacheConfigurationWidget.h:        apacheConfiguration->setApachePaths(apacheFileList->paths(apachePathsId));
modes/apache/apacheConfigurationWidget.h:        apacheConfiguration->setApacheAccessPaths(apacheFileList->paths(apacheAccessPathsId));
modes/apache/apacheConfigurationWidget.h:                                                       ->logModeConfiguration<ApacheConfiguration *>();
modes/apache/apacheConfigurationWidget.h:        apacheFileList->removeAllItems();
modes/apache/apacheConfigurationWidget.h:        apacheFileList->addPaths(apachePathsId, apacheConfiguration->apachePaths());
modes/apache/apacheConfigurationWidget.h:        apacheFileList->addPaths(apacheAccessPathsId, apacheConfiguration->apacheAccessPaths());
modes/apache/apacheConfigurationWidget.h:        if (apacheFileList->isOneOfCategoryEmpty() == true) {
modes/apache/apacheFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAnalyzer.h:     * /var/www/html/ksystemlog/screenshots/small/kernel-view.png, referer:
modes/apache/apacheAnalyzer.h:     * /var/www/html/ksystemlog/screenshots/small/system-filter.png, referer:
modes/apache/apacheAnalyzer.h:            QString strDate = line.mid(dateBegin + 1, dateEnd - dateBegin - 1);
modes/apache/apacheAnalyzer.h:            date = QDate(year.toInt(), ParsingHelper::instance()->parseSyslogMonth(month), day.toInt());
modes/apache/apacheAnalyzer.h:        if (beginSquareBracket == -1 || squareBracket == -1) {
modes/apache/apacheAnalyzer.h:            client = line.mid(8, squareBracket - 8); // 8=strlen("[client ")
modes/apache/apacheAccessItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/apache/apacheAccessItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/apache/apacheAccessItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/apache/apacheLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheLogMode.cpp:    d->logModeConfiguration = apacheConfiguration;
modes/apache/apacheLogMode.cpp:    d->logModeConfigurationWidget = apacheConfigurationWidget;
modes/apache/apacheLogMode.cpp:    d->itemBuilder = new ApacheItemBuilder();
modes/apache/apacheLogMode.cpp:    d->action = createDefaultAction();
modes/apache/apacheLogMode.cpp:    d->action->setToolTip(i18n("Display the Apache log."));
modes/apache/apacheLogMode.cpp:    d->action->setWhatsThis(
modes/apache/apacheLogMode.cpp:    checkLogFilesPresence(apacheConfiguration->apachePaths());
modes/apache/apacheLogMode.cpp:    return apacheConfiguration->findNoModeLogFiles(apacheConfiguration->apachePaths());
modes/apache/apacheConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessLogMode.h:#define APACHE_ACCESS_MODE_ICON "network-server"
modes/apache/apacheAccessAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessAnalyzer.h:            = ParsingHelper::instance()->parseHttpDateTime(strDateTime.mid(1, strDateTime.count() - 2));
modes/apache/apacheAccessAnalyzer.h:        QString httpResponse = ParsingHelper::instance()->parseHttpResponse(line.left(spacePos));
modes/apache/apacheAccessAnalyzer.h:        QString bytesSent = ParsingHelper::instance()->parseSize(line.left(spacePos));
modes/apache/apacheAccessAnalyzer.h:        if (endQuote != -1) {
modes/apache/apacheAccessAnalyzer.h:        if (endQuote != -1) {
modes/apache/apacheAccessAnalyzer.h:            agent = ParsingHelper::instance()->parseAgent(line.left(endQuote));
modes/apache/apacheItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/apache/apacheItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/apache/apacheItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/apache/apacheConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("ApacheLogMode"));
modes/apache/apacheConfiguration.h:        configuration->addItemStringList(QStringLiteral("ApacheLogFilesPaths"), d->apachePaths,
modes/apache/apacheConfiguration.h:        configuration->addItemStringList(QStringLiteral("ApacheAccessLogFilesPaths"), d->apacheAccessPaths,
modes/apache/apacheConfiguration.h:    QStringList apachePaths() const { return d->apachePaths; }
modes/apache/apacheConfiguration.h:    QStringList apacheAccessPaths() const { return d->apacheAccessPaths; }
modes/apache/apacheConfiguration.h:    void setApachePaths(const QStringList &apachePaths) { d->apachePaths = apachePaths; }
modes/apache/apacheConfiguration.h:        d->apacheAccessPaths = apacheAccessPaths;
modes/apache/apacheFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheFactory.cpp:    bool apacheLogsExist = apacheLogMode->filesExist();
modes/apache/apacheFactory.cpp:    bool apacheAccessLogsExist = apacheAccessLogMode->filesExist();
modes/apache/apacheFactory.cpp:        multipleActions->addInnerAction(apacheLogMode->action());
modes/apache/apacheFactory.cpp:        multipleActions->addInnerAction(apacheAccessLogMode->action());
modes/apache/apacheFactory.cpp:    multipleActions->setCategory(LogModeAction::ServicesCategory);
modes/apache/apacheAccessLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheAccessLogMode.cpp:    d->logModeConfiguration = apacheConfiguration;
modes/apache/apacheAccessLogMode.cpp:    d->logModeConfigurationWidget = apacheConfigurationWidget;
modes/apache/apacheAccessLogMode.cpp:    d->itemBuilder = new ApacheAccessItemBuilder();
modes/apache/apacheAccessLogMode.cpp:    d->action = createDefaultAction();
modes/apache/apacheAccessLogMode.cpp:    d->action->setToolTip(i18n("Display the Apache Access log."));
modes/apache/apacheAccessLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/apache/apacheAccessLogMode.cpp:    checkLogFilesPresence(apacheConfiguration->apacheAccessPaths());
modes/apache/apacheAccessLogMode.cpp:    return apacheConfiguration->findNoModeLogFiles(apacheConfiguration->apacheAccessPaths());
modes/apache/apacheItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/apache/apacheLogMode.h:#define APACHE_MODE_ICON "/usr/local/share/icons/logavista/server.png"
modes/fontconfig/fontconfigConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("FontconfigLogMode"));
modes/fontconfig/fontconfigConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->fontconfigPaths, defaultFontconfigPaths,
modes/fontconfig/fontconfigConfiguration.h:    QStringList fontconfigPaths() const { return d->fontconfigPaths; }
modes/fontconfig/fontconfigConfiguration.h:    void setFontconfigPaths(const QStringList &fontconfigPaths) { d->fontconfigPaths = fontconfigPaths; }
modes/fontconfig/fontconfigFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigFactory.cpp:    if (!logMode->filesExist())
modes/fontconfig/fontconfigFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/fontconfig/fontconfigFactory.cpp:    logModeAction->setCategory(LogModeAction::OthersCategory);
modes/fontconfig/fontconfigFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigConfigurationWidget.h:        this->setLayout(layout);
modes/fontconfig/fontconfigConfigurationWidget.h:        layout->addWidget(fileList);
modes/fontconfig/fontconfigConfigurationWidget.h:                                                       ->logModeConfiguration<FontconfigConfiguration *>();
modes/fontconfig/fontconfigConfigurationWidget.h:        fontconfigConfiguration->setFontconfigPaths(fileList->paths());
modes/fontconfig/fontconfigConfigurationWidget.h:                                                       ->logModeConfiguration<FontconfigConfiguration *>();
modes/fontconfig/fontconfigConfigurationWidget.h:        fileList->removeAllItems();
modes/fontconfig/fontconfigConfigurationWidget.h:        fileList->addPaths(fontconfigConfiguration->fontconfigPaths());
modes/fontconfig/fontconfigConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/fontconfig/fontconfigLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigLogMode.cpp:    d->logModeConfiguration = QSharedPointer<FontconfigConfiguration>(new FontconfigConfiguration());
modes/fontconfig/fontconfigLogMode.cpp:    d->logModeConfigurationWidget = new FontconfigConfigurationWidget();
modes/fontconfig/fontconfigLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/fontconfig/fontconfigLogMode.cpp:    d->action = createDefaultAction();
modes/fontconfig/fontconfigLogMode.cpp:    d->action->setToolTip(i18n("Fontconfig log /var/log/fontconfig.log"));
modes/fontconfig/fontconfigLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/fontconfig/fontconfigLogMode.cpp:    checkLogFilesPresence(configuration->fontconfigPaths());
modes/fontconfig/fontconfigLogMode.cpp:    return configuration->findGenericLogFiles(configuration->fontconfigPaths());
modes/fontconfig/fontconfigLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/fontconfig/fontconfigLogMode.h:#define FONTCONFIG_MODE_ICON "/usr/local/share/icons/logavista/psf.png"
modes/powerlogs/powerlogsFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsFactory.cpp:    if (!logMode->filesExist())
modes/powerlogs/powerlogsFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/powerlogs/powerlogsConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsConfigurationWidget.h:        this->setLayout(layout);
modes/powerlogs/powerlogsConfigurationWidget.h:        layout->addWidget(fileList);
modes/powerlogs/powerlogsConfigurationWidget.h:                                                       ->logModeConfiguration<PowerlogsConfiguration *>();
modes/powerlogs/powerlogsConfigurationWidget.h:        powerlogsConfiguration->setPowerlogsPaths(fileList->paths());
modes/powerlogs/powerlogsConfigurationWidget.h:                                                       ->logModeConfiguration<PowerlogsConfiguration *>();
modes/powerlogs/powerlogsConfigurationWidget.h:        fileList->removeAllItems();
modes/powerlogs/powerlogsConfigurationWidget.h:        fileList->addPaths(powerlogsConfiguration->powerlogsPaths());
modes/powerlogs/powerlogsConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/powerlogs/powerlogsConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("PowerlogsLogMode"));
modes/powerlogs/powerlogsConfiguration.h:		defaultPowerlogsPaths << QStringLiteral("/var/log/pm-powersave.log");
modes/powerlogs/powerlogsConfiguration.h:		defaultPowerlogsPaths << QStringLiteral("/var/log/pm-suspend.log");
modes/powerlogs/powerlogsConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->powerlogsPaths, defaultPowerlogsPaths,
modes/powerlogs/powerlogsConfiguration.h:    QStringList powerlogsPaths() const { return d->powerlogsPaths; }
modes/powerlogs/powerlogsConfiguration.h:    void setPowerlogsPaths(const QStringList &powerlogsPaths) { d->powerlogsPaths = powerlogsPaths; }
modes/powerlogs/powerlogsConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsLogMode.cpp:    d->logModeConfiguration = QSharedPointer<PowerlogsConfiguration>(new PowerlogsConfiguration());
modes/powerlogs/powerlogsLogMode.cpp:    d->logModeConfigurationWidget = new PowerlogsConfigurationWidget();
modes/powerlogs/powerlogsLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/powerlogs/powerlogsLogMode.cpp:    d->action = createDefaultAction();
modes/powerlogs/powerlogsLogMode.cpp:    d->action->setToolTip(i18n("Power issues: hibernate, sleep, pm-powersave, pm-suspend."));
modes/powerlogs/powerlogsLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/powerlogs/powerlogsLogMode.cpp:    checkLogFilesPresence(configuration->powerlogsPaths());
modes/powerlogs/powerlogsLogMode.cpp:    return configuration->findGenericLogFiles(configuration->powerlogsPaths());
modes/powerlogs/powerlogsLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/powerlogs/powerlogsLogMode.h:#define POWERLOGS_MODE_ICON "/usr/local/share/icons/logavista/adapter.png"
modes/authentication/authenticationLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationLogMode.cpp:    d->logModeConfiguration = QSharedPointer<AuthenticationConfiguration>(new AuthenticationConfiguration());
modes/authentication/authenticationLogMode.cpp:    d->logModeConfigurationWidget = new AuthenticationConfigurationWidget();
modes/authentication/authenticationLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/authentication/authenticationLogMode.cpp:    d->action = createDefaultAction();
modes/authentication/authenticationLogMode.cpp:    d->action->setToolTip(i18n("Authentication security audit logs /var/log/authentication/security.report.*"));
modes/authentication/authenticationLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/authentication/authenticationLogMode.cpp:    checkLogFilesPresence(configuration->authenticationPaths());
modes/authentication/authenticationLogMode.cpp:    return configuration->findGenericLogFiles(configuration->authenticationPaths());
modes/authentication/authenticationConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("AuthenticationLogMode"));
modes/authentication/authenticationConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/auth.log.* | head -n 3 \"";
modes/authentication/authenticationConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->authenticationPaths, defaultAuthenticationPaths,
modes/authentication/authenticationConfiguration.h:    QStringList authenticationPaths() const { return d->authenticationPaths; }
modes/authentication/authenticationConfiguration.h:    void setAuthenticationPaths(const QStringList &authenticationPaths) { d->authenticationPaths = authenticationPaths; }
modes/authentication/authenticationLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationLogMode.h:#define AUTHENTICATION_MODE_ICON "/usr/local/share/icons/logavista/remove.svg"
modes/authentication/authenticationFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationFactory.cpp:    if (!logMode->filesExist())
modes/authentication/authenticationFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/authentication/authenticationConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/authentication/authenticationConfigurationWidget.h:        this->setLayout(layout);
modes/authentication/authenticationConfigurationWidget.h:        layout->addWidget(fileList);
modes/authentication/authenticationConfigurationWidget.h:                                                       ->logModeConfiguration<AuthenticationConfiguration *>();
modes/authentication/authenticationConfigurationWidget.h:        authenticationConfiguration->setAuthenticationPaths(fileList->paths());
modes/authentication/authenticationConfigurationWidget.h:                                                       ->logModeConfiguration<AuthenticationConfiguration *>();
modes/authentication/authenticationConfigurationWidget.h:        fileList->removeAllItems();
modes/authentication/authenticationConfigurationWidget.h:        fileList->addPaths(authenticationConfiguration->authenticationPaths());
modes/authentication/authenticationConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/authentication/authenticationConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimLogMode.h:#define TRIM_MODE_ICON "/usr/local/share/icons/logavista/ieee1394.svg"
modes/trim/trimConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("TrimLogMode"));
modes/trim/trimConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->trimPaths, defaultTrimPaths,
modes/trim/trimConfiguration.h:    QStringList trimPaths() const { return d->trimPaths; }
modes/trim/trimConfiguration.h:    void setTrimPaths(const QStringList &trimPaths) { d->trimPaths = trimPaths; }
modes/trim/trimConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimConfigurationWidget.h:        this->setLayout(layout);
modes/trim/trimConfigurationWidget.h:        layout->addWidget(fileList);
modes/trim/trimConfigurationWidget.h:                                                       ->logModeConfiguration<TrimConfiguration *>();
modes/trim/trimConfigurationWidget.h:        trimConfiguration->setTrimPaths(fileList->paths());
modes/trim/trimConfigurationWidget.h:                                                       ->logModeConfiguration<TrimConfiguration *>();
modes/trim/trimConfigurationWidget.h:        fileList->removeAllItems();
modes/trim/trimConfigurationWidget.h:        fileList->addPaths(trimConfiguration->trimPaths());
modes/trim/trimConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/trim/:w: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/:w:        this->setLayout(layout);
modes/trim/:w:        layout->addWidget(fileList);
modes/trim/:w:                                                       ->logModeConfiguration<TrimConfiguration *>();
modes/trim/:w:        trimConfiguration->setTrimPaths(fileList->paths());
modes/trim/:w:                                                       ->logModeConfiguration<TrimConfiguration *>();
modes/trim/:w:        fileList->removeAllItems();
modes/trim/:w:        fileList->addPaths(trimConfiguration->trimPaths());
modes/trim/:w:        if (fileList->isEmpty() == false) {
modes/trim/trimFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimLogMode.cpp:    d->logModeConfiguration = QSharedPointer<TrimConfiguration>(new TrimConfiguration());
modes/trim/trimLogMode.cpp:    d->logModeConfigurationWidget = new TrimConfigurationWidget();
modes/trim/trimLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/trim/trimLogMode.cpp:    d->action = createDefaultAction();
modes/trim/trimLogMode.cpp:    d->action->setToolTip(i18n("USB Trim logs: /var/log/trim.log"));
modes/trim/trimLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/trim/trimLogMode.cpp:    checkLogFilesPresence(configuration->trimPaths());
modes/trim/trimLogMode.cpp:    return configuration->findGenericLogFiles(configuration->trimPaths());
modes/trim/trimConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/trim/trimFactory.cpp:    if (!logMode->filesExist())
modes/trim/trimFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/trim/trimFactory.cpp:    logModeAction->setCategory(LogModeAction::OthersCategory);
modes/kernel/kernelAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelFactory.cpp:    if (!logMode->filesExist())
modes/kernel/kernelFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/kernel/kernelLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelLogMode.cpp:    d->logModeConfigurationWidget = NULL;
modes/kernel/kernelLogMode.cpp:    d->itemBuilder = new KernelItemBuilder();
modes/kernel/kernelLogMode.cpp:    d->action = createDefaultAction();
modes/kernel/kernelLogMode.cpp:    d->action->setToolTip(i18n("Display the kernel log."));
modes/kernel/kernelLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/kernel/kernelItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/kernel/kernelItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/kernel/kernelItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/kernel/kernelFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/kernel/kernelAnalyzer.h:        startupDateTime = QDateTime::currentDateTime().addSecs(-updateSeconds);
modes/kernel/kernelAnalyzer.h:        if (timeExists != -1) {
modes/kernel/kernelAnalyzer.h:  logDebug() << "--------------------------------";
modes/kernel/kernelAnalyzer.h:  logDebug() << "--------------------------------";
modes/kernel/kernelAnalyzer.h:        if (doublePointPosition != -1 && doublePointPosition < 20) {
modes/cups/cupsFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfLogMode.h:#define CUPS_PDF_MODE_ICON "application-pdf"
modes/cups/cupsPageItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/cups/cupsItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/cups/cupsLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsLogMode.cpp:    d->logModeConfiguration = cupsConfiguration;
modes/cups/cupsLogMode.cpp:    d->logModeConfigurationWidget = cupsConfigurationWidget;
modes/cups/cupsLogMode.cpp:    d->itemBuilder = new CupsItemBuilder();
modes/cups/cupsLogMode.cpp:    d->action = createDefaultAction();
modes/cups/cupsLogMode.cpp:    d->action->setToolTip(i18n("Display the Cups log."));
modes/cups/cupsLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/cups/cupsLogMode.cpp:    checkLogFilesPresence(cupsConfiguration->cupsPaths());
modes/cups/cupsLogMode.cpp:    return cupsConfiguration->findNoModeLogFiles(cupsConfiguration->cupsPaths());
modes/cups/cupsLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsLogMode.h:#define CUPS_MODE_ICON "/usr/local/share/icons/logavista/cups.png"
modes/cups/cupsAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAnalyzer.h:     * http://www.cups.org/documentation.php/ref-error_log.html
modes/cups/cupsAnalyzer.h:     * level date-time message
modes/cups/cupsAnalyzer.h:     * A - Alert message (LogLevel alert)
modes/cups/cupsAnalyzer.h:     * C - Critical error message (LogLevel crit)
modes/cups/cupsAnalyzer.h:     * D - Debugging message (LogLevel debug)
modes/cups/cupsAnalyzer.h:     * d - Detailed debugging message (LogLevel debug2)
modes/cups/cupsAnalyzer.h:     * E - Normal error message (LogLevel error)
modes/cups/cupsAnalyzer.h:     * I - Informational message (LogLevel info)
modes/cups/cupsAnalyzer.h:     * N - Notice message (LogLevel notice)
modes/cups/cupsAnalyzer.h:     * W - Warning message (LogLevel warn)
modes/cups/cupsAnalyzer.h:     * X - Emergency error message (LogLevel emerg)
modes/cups/cupsPdfItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessLogMode.cpp:    d->logModeConfiguration = cupsConfiguration;
modes/cups/cupsAccessLogMode.cpp:    d->logModeConfigurationWidget = cupsConfigurationWidget;
modes/cups/cupsAccessLogMode.cpp:    d->itemBuilder = new CupsAccessItemBuilder();
modes/cups/cupsAccessLogMode.cpp:    d->action = createDefaultAction();
modes/cups/cupsAccessLogMode.cpp:    d->action->setToolTip(i18n("Display the CUPS Web Server Access log."));
modes/cups/cupsAccessLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/cups/cupsAccessLogMode.cpp:    checkLogFilesPresence(cupsConfiguration->cupsAccessPaths());
modes/cups/cupsAccessLogMode.cpp:    return cupsConfiguration->findNoModeLogFiles(cupsConfiguration->cupsAccessPaths());
modes/cups/cupsPdfItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/cups/cupsPdfItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/cups/cupsPdfItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/cups/cupsConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsConfigurationWidget.h:        this->setLayout(layout);
modes/cups/cupsConfigurationWidget.h:        cupsPathsId = cupsFileList->addCategory(i18n("Cups Log Files"), i18n("Add Cups File..."));
modes/cups/cupsConfigurationWidget.h:            = cupsFileList->addCategory(i18n("Cups Access Log Files"), i18n("Add Cups Access File..."));
modes/cups/cupsConfigurationWidget.h:            = cupsFileList->addCategory(i18n("Cups Page Log Files"), i18n("Add Cups Page File..."));
modes/cups/cupsConfigurationWidget.h:        cupsPdfPathsId = cupsFileList->addCategory(i18n("Cups PDF Log Files"), i18n("Add Cups PDF File..."));
modes/cups/cupsConfigurationWidget.h:        layout->addWidget(cupsFileList);
modes/cups/cupsConfigurationWidget.h:                                                   ->logModeConfiguration<CupsConfiguration *>();
modes/cups/cupsConfigurationWidget.h:        cupsConfiguration->setCupsPaths(cupsFileList->paths(cupsPathsId));
modes/cups/cupsConfigurationWidget.h:        cupsConfiguration->setCupsAccessPaths(cupsFileList->paths(cupsAccessPathsId));
modes/cups/cupsConfigurationWidget.h:        cupsConfiguration->setCupsPagePaths(cupsFileList->paths(cupsPagePathsId));
modes/cups/cupsConfigurationWidget.h:        cupsConfiguration->setCupsPdfPaths(cupsFileList->paths(cupsPdfPathsId));
modes/cups/cupsConfigurationWidget.h:                                                   ->logModeConfiguration<CupsConfiguration *>();
modes/cups/cupsConfigurationWidget.h:        cupsFileList->removeAllItems();
modes/cups/cupsConfigurationWidget.h:        cupsFileList->addPaths(cupsPathsId, cupsConfiguration->cupsPaths());
modes/cups/cupsConfigurationWidget.h:        cupsFileList->addPaths(cupsAccessPathsId, cupsConfiguration->cupsAccessPaths());
modes/cups/cupsConfigurationWidget.h:        cupsFileList->addPaths(cupsPagePathsId, cupsConfiguration->cupsPagePaths());
modes/cups/cupsConfigurationWidget.h:        cupsFileList->addPaths(cupsPdfPathsId, cupsConfiguration->cupsPdfPaths());
modes/cups/cupsConfigurationWidget.h:        if (cupsFileList->isOneOfCategoryEmpty() == true) {
modes/cups/cupsAccessLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageAnalyzer.h:     * http://www.cups.org/documentation.php/ref-page_log.html
modes/cups/cupsPageAnalyzer.h:     * Format : printer user job-id date-time page-number num-copies job-billing
modes/cups/cupsPageAnalyzer.h:     * DeskJet root 2 [20/May/1999:19:21:05 +0000] 1 1 acme-123
modes/cups/cupsPageAnalyzer.h:     * DeskJet root 2 [20/May/1999:19:21:05 +0000] 2 1 acme-123
modes/cups/cupsPageAnalyzer.h:        if (firstPosition == -1) {
modes/cups/cupsPageAnalyzer.h:        QDateTime dateTime = ParsingHelper::instance()->parseHttpDateTime(capturedTexts.takeAt(3));
modes/cups/cupsAccessAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessAnalyzer.h:     * http://www.cups.org/documentation.php/ref-access_log.html
modes/cups/cupsAccessAnalyzer.h:     * host group user date-time \"method resource version\" status bytes ipp-operation ipp-status
modes/cups/cupsAccessAnalyzer.h:     * 10.0.1.2 - - [01/Dec/2005:21:50:28 +0000] "POST / HTTP/1.1" 200 317 CUPS-Get-Printers
modes/cups/cupsAccessAnalyzer.h:     *successful-ok-ignored-or-substituted-attributes
modes/cups/cupsAccessAnalyzer.h:     * localhost - - [01/Dec/2005:21:50:32 +0000] "GET /admin HTTP/1.1" 200 0 - -
modes/cups/cupsAccessAnalyzer.h:     * localhost - - [01/Dec/2005:21:50:32 +0000] "POST / HTTP/1.1" 200 157 CUPS-Get-Printers
modes/cups/cupsAccessAnalyzer.h:     *successful-ok-ignored-or-substituted-attributes
modes/cups/cupsAccessAnalyzer.h:     * localhost - - [01/Dec/2005:21:50:32 +0000] "POST / HTTP/1.1" 200 1411 CUPS-Get-Devices -
modes/cups/cupsAccessAnalyzer.h:     * localhost - - [01/Dec/2005:21:50:32 +0000] "GET /admin HTTP/1.1" 200 6667 - -
modes/cups/cupsAccessAnalyzer.h:        if (firstPosition == -1) {
modes/cups/cupsAccessAnalyzer.h:        capturedTexts.replace(5, ParsingHelper::instance()->parseHttpResponse(capturedTexts.at(5)));
modes/cups/cupsAccessAnalyzer.h:        capturedTexts.replace(6, ParsingHelper::instance()->parseSize(capturedTexts.at(6)));
modes/cups/cupsAccessAnalyzer.h:        QDateTime dateTime = ParsingHelper::instance()->parseHttpDateTime(capturedTexts.takeAt(3));
modes/cups/cupsAccessAnalyzer.h:        LogLevel *logLevel = findLevel(capturedTexts.at(capturedTexts.count() - 1));
modes/cups/cupsAccessAnalyzer.h:        if (status == QLatin1String("successful-ok"))
modes/cups/cupsPageItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/cups/cupsPageItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/cups/cupsPageItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/cups/cupsPageLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageLogMode.cpp:    d->logModeConfiguration = cupsConfiguration;
modes/cups/cupsPageLogMode.cpp:    d->logModeConfigurationWidget = cupsConfigurationWidget;
modes/cups/cupsPageLogMode.cpp:    d->itemBuilder = new CupsPageItemBuilder();
modes/cups/cupsPageLogMode.cpp:    d->action = createDefaultAction();
modes/cups/cupsPageLogMode.cpp:    d->action->setToolTip(i18n("Display the CUPS Page log."));
modes/cups/cupsPageLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/cups/cupsPageLogMode.cpp:    checkLogFilesPresence(cupsConfiguration->cupsPagePaths());
modes/cups/cupsPageLogMode.cpp:    return cupsConfiguration->findNoModeLogFiles(cupsConfiguration->cupsPagePaths());
modes/cups/cupsPdfAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfAnalyzer.h:    // Fri Sep 30 21:58:37 2005  [ERROR] failed to create spool directory (/var/spool/cups-pdf/SPOOL)
modes/cups/cupsPdfAnalyzer.h:        , cupsPdfRegex(QLatin1String("\\S* ") + ParsingHelper::instance()->syslogDateTimeRegexp()
modes/cups/cupsPdfAnalyzer.h:     * http://www.physik.uni-wuerzburg.de/~vrbehr/cups-pdf/documentation.shtml (cups-pdf_log)
modes/cups/cupsPdfAnalyzer.h:     *(/var/spool/cups-pdf/root/Test_Pdf.pdf)
modes/cups/cupsPdfAnalyzer.h:     * Fri Sep 30 21:58:37 2005  [ERROR] failed to create spool directory (/var/spool/cups-pdf/SPOOL)
modes/cups/cupsPdfAnalyzer.h:     * Sat Oct  1 09:11:45 2005  [ERROR] failed to create spool directory (/var/spool/cups-pdf/SPOOL)
modes/cups/cupsPdfAnalyzer.h:        if (firstPosition == -1) {
modes/cups/cupsPdfAnalyzer.h:  logDebug() << "------------------------------------------";
modes/cups/cupsPdfAnalyzer.h:  logDebug() << "------------------------------------------";
modes/cups/cupsPdfAnalyzer.h:        QDateTime dateTime = ParsingHelper::instance()->parseSyslogDateTime(capturedTexts.takeAt(0));
modes/cups/cupsFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsFactory.cpp:    bool cupsLogsExist = cupsLogMode->filesExist();
modes/cups/cupsFactory.cpp:    bool cupsAccessLogsExist = cupsAccessLogMode->filesExist();
modes/cups/cupsFactory.cpp:    bool cupsPageLogsExist = cupsPageLogMode->filesExist();
modes/cups/cupsFactory.cpp:    bool cupsPdfLogsExist = cupsPdfLogMode->filesExist();
modes/cups/cupsFactory.cpp:        multipleActions->addInnerAction(cupsLogMode->action());
modes/cups/cupsFactory.cpp:        multipleActions->addInnerAction(cupsAccessLogMode->action());
modes/cups/cupsFactory.cpp:        multipleActions->addInnerAction(cupsPageLogMode->action());
modes/cups/cupsFactory.cpp:        multipleActions->addInnerAction(cupsPdfLogMode->action());
modes/cups/cupsFactory.cpp:    multipleActions->setCategory(LogModeAction::ServicesCategory);
modes/cups/cupsAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAnalyzer.cpp:    QDateTime dateTime = ParsingHelper::instance()->parseHttpDateTime(logLine.mid(3, 26));
modes/cups/cupsConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("CupsLogMode"));
modes/cups/cupsConfiguration.h:         configuration->addItemStringList(QStringLiteral("CupsLogFilesPaths"), d->cupsPaths, defaultCupsPaths,
modes/cups/cupsConfiguration.h:        configuration->addItemStringList(QStringLiteral("CupsAccessLogFilesPaths"), d->cupsAccessPaths,
modes/cups/cupsConfiguration.h:        configuration->addItemStringList(QStringLiteral("CupsPageLogFilesPaths"), d->cupsPagePaths,
modes/cups/cupsConfiguration.h:        defaultCupsPdfPaths << QStringLiteral("/var/log/cups/cups-pdf_log");
modes/cups/cupsConfiguration.h:        configuration->addItemStringList(QStringLiteral("CupsPdfLogFilesPaths"), d->cupsPdfPaths,
modes/cups/cupsConfiguration.h:    QStringList cupsPaths() const { return d->cupsPaths; }
modes/cups/cupsConfiguration.h:    QStringList cupsAccessPaths() const { return d->cupsAccessPaths; }
modes/cups/cupsConfiguration.h:    QStringList cupsPagePaths() const { return d->cupsPagePaths; }
modes/cups/cupsConfiguration.h:    QStringList cupsPdfPaths() const { return d->cupsPdfPaths; }
modes/cups/cupsConfiguration.h:    void setCupsPaths(const QStringList &cupsPaths) { d->cupsPaths = cupsPaths; }
modes/cups/cupsConfiguration.h:    void setCupsAccessPaths(const QStringList &cupsAccessPaths) { d->cupsAccessPaths = cupsAccessPaths; }
modes/cups/cupsConfiguration.h:    void setCupsPagePaths(const QStringList &cupsPagePaths) { d->cupsPagePaths = cupsPagePaths; }
modes/cups/cupsConfiguration.h:    void setCupsPdfPaths(const QStringList &cupsPdfPaths) { d->cupsPdfPaths = cupsPdfPaths; }
modes/cups/cupsPageAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPageLogMode.h:#define CUPS_PAGE_MODE_ICON "document-new"
modes/cups/cupsPdfLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfLogMode.cpp:    d->logModeConfiguration = cupsConfiguration;
modes/cups/cupsPdfLogMode.cpp:    d->logModeConfigurationWidget = cupsConfigurationWidget;
modes/cups/cupsPdfLogMode.cpp:    d->itemBuilder = new CupsPdfItemBuilder();
modes/cups/cupsPdfLogMode.cpp:    d->action = createDefaultAction();
modes/cups/cupsPdfLogMode.cpp:    d->action->setToolTip(i18n("Display the CUPS PDF log."));
modes/cups/cupsPdfLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/cups/cupsPdfLogMode.cpp:    checkLogFilesPresence(cupsConfiguration->cupsPdfPaths());
modes/cups/cupsPdfLogMode.cpp:    return cupsConfiguration->findNoModeLogFiles(cupsConfiguration->cupsPdfPaths());
modes/cups/cupsAccessAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsPdfAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cups/cupsAccessItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/cups/cupsAccessItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/cups/cupsAccessItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/cron/cronFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronFactory.cpp:    if (!logMode->filesExist())
modes/cron/cronFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/cron/cronFactory.cpp:    logModeAction->setCategory(LogModeAction::ServicesCategory);
modes/cron/cronAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronAnalyzer.h:     * Sep 16 01:39:01 localhost /USR/SBIN/CRON[11069]: (root) CMD (  [ -d /var/lib/php5 ] && find /var/lib/php5/ -type f -cmin +$(/usr/lib/php5/maxlifetime) -print0 | xargs -r -0 rm)
modes/cron/cronConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("CronLogMode"));
modes/cron/cronConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->cronPaths, defaultCronPaths,
modes/cron/cronConfiguration.h:        configuration->addItemString(QStringLiteral("ProcessFilter"), d->processFilter, defaultProcessFilter,
modes/cron/cronConfiguration.h:    QString processFilter() const { return d->processFilter; }
modes/cron/cronConfiguration.h:    void setProcessFilter(const QString &processFilter) { d->processFilter = processFilter; }
modes/cron/cronConfiguration.h:    QStringList cronPaths() const { return d->cronPaths; }
modes/cron/cronConfiguration.h:    void setCronPaths(const QStringList &cronPaths) { d->cronPaths = cronPaths; }
modes/cron/cronAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronAnalyzer.cpp:        QStringList list = syslogLine->logItems();
modes/cron/cronAnalyzer.cpp:        QString user = message.mid(leftBracket + 1, rightBracket - leftBracket - 1);
modes/cron/cronAnalyzer.cpp:        if (message.indexOf(QLatin1String("CMD")) != -1) {
modes/cron/cronAnalyzer.cpp:            message = message.right(message.length() - rightBracket - 7);
modes/cron/cronAnalyzer.cpp:            syslogLine->setLogLevel(Globals::instance().informationLogLevel());
modes/cron/cronAnalyzer.cpp:            message = message.right(message.length() - rightBracket - 2);
modes/cron/cronAnalyzer.cpp:            syslogLine->setLogLevel(Globals::instance().noticeLogLevel());
modes/cron/cronAnalyzer.cpp:        syslogLine->setLogItems(list);
modes/cron/cronAnalyzer.cpp:        qDebug() << "Entered CronAnalyzer isCronLine routine " << syslogLine->logItems();
modes/cron/cronAnalyzer.cpp:        CronConfiguration *cronConfiguration = logMode->logModeConfiguration<CronConfiguration *>();
modes/cron/cronAnalyzer.cpp:        if (cronConfiguration->processFilter().isEmpty()) {
modes/cron/cronAnalyzer.cpp:        const QStringList list = syslogLine->logItems();
modes/cron/cronAnalyzer.cpp:        if (processLine.contains(cronConfiguration->processFilter(), Qt::CaseInsensitive) == true) {
modes/cron/cronFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/cron/cronItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/cron/cronItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/cron/cronItemBuilder.h:        result.append(labelMessageFormat(i18n("Original file:"), line->sourceFileName()));
modes/cron/cronConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronConfigurationWidget.h:        this->setLayout(layout);
modes/cron/cronConfigurationWidget.h:        layout->addWidget(fileList);
modes/cron/cronConfigurationWidget.h:        processFilterGroup->setCheckable(true);
modes/cron/cronConfigurationWidget.h:        layout->addWidget(processFilterGroup);
modes/cron/cronConfigurationWidget.h:        processFilterGroup->setLayout(processFilterLayout);
modes/cron/cronConfigurationWidget.h:        processFilterLabel->setBuddy(processFilter);
modes/cron/cronConfigurationWidget.h:        processFilterLayout->addWidget(processFilterLabel);
modes/cron/cronConfigurationWidget.h:        processFilterLayout->addWidget(processFilter);
modes/cron/cronConfigurationWidget.h:        if (fileList->isEmpty() == true) {
modes/cron/cronConfigurationWidget.h:        if (processFilterGroup->isChecked() && processFilter->text().isEmpty()) {
modes/cron/cronConfigurationWidget.h:                                                   ->logModeConfiguration<CronConfiguration *>();
modes/cron/cronConfigurationWidget.h:        cronConfiguration->setCronPaths(fileList->paths());
modes/cron/cronConfigurationWidget.h:        if (processFilterGroup->isChecked() == false) {
modes/cron/cronConfigurationWidget.h:            cronConfiguration->setProcessFilter(QLatin1String(""));
modes/cron/cronConfigurationWidget.h:            cronConfiguration->setProcessFilter(processFilter->text());
modes/cron/cronConfigurationWidget.h:                                                   ->logModeConfiguration<CronConfiguration *>();
modes/cron/cronConfigurationWidget.h:        fileList->removeAllItems();
modes/cron/cronConfigurationWidget.h:        fileList->addPaths(cronConfiguration->cronPaths());
modes/cron/cronConfigurationWidget.h:        if (cronConfiguration->processFilter().isEmpty()) {
modes/cron/cronConfigurationWidget.h:            processFilterGroup->setChecked(false);
modes/cron/cronConfigurationWidget.h:            processFilterGroup->setChecked(true);
modes/cron/cronConfigurationWidget.h:            processFilter->setText(cronConfiguration->processFilter());
modes/cron/cronConfigurationWidget.h:        processFilter->setEnabled(enabled);
modes/cron/cronConfigurationWidget.h:        processFilterLabel->setEnabled(enabled);
modes/cron/cronItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronLogMode.h:#define CRON_MODE_ICON "/usr/local/share/icons/logavista/calendar.svg"
modes/cron/cronConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/cron/cronLogMode.cpp:    d->logModeConfiguration = QSharedPointer<CronConfiguration>(new CronConfiguration());
modes/cron/cronLogMode.cpp:    d->logModeConfigurationWidget = new CronConfigurationWidget();
modes/cron/cronLogMode.cpp:    d->itemBuilder = new CronItemBuilder();
modes/cron/cronLogMode.cpp:    d->action = createDefaultAction();
modes/cron/cronLogMode.cpp:    d->action->setToolTip(i18n("Display the planned tasks log (Cron log)."));
modes/cron/cronLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/cron/cronLogMode.cpp:        "planned tasks on your system, like security checks, or auto-restarting of some services. Use this "
modes/cron/cronLogMode.cpp:    checkLogFilesPresence(cronConfiguration->cronPaths());
modes/cron/cronLogMode.cpp:    return cronConfiguration->findNoModeLogFiles(cronConfiguration->cronPaths());
modes/samba/sambaConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("SambaLogMode"));
modes/samba/sambaConfiguration.h:        configuration->addItemStringList(QStringLiteral("SambaLogFilesPaths"), d->sambaPaths,
modes/samba/sambaConfiguration.h:        configuration->addItemStringList(QStringLiteral("SambaAccessLogFilesPaths"), d->sambaAccessPaths,
modes/samba/sambaConfiguration.h:        configuration->addItemStringList(QStringLiteral("NetbiosLogFilesPaths"), d->netbiosPaths,
modes/samba/sambaConfiguration.h:    QStringList sambaPaths() const { return d->sambaPaths; }
modes/samba/sambaConfiguration.h:    QStringList sambaAccessPaths() const { return d->sambaAccessPaths; }
modes/samba/sambaConfiguration.h:    QStringList netbiosPaths() const { return d->netbiosPaths; }
modes/samba/sambaConfiguration.h:    void setSambaPaths(const QStringList &sambaPaths) { d->sambaPaths = sambaPaths; }
modes/samba/sambaConfiguration.h:    void setNetbiosPaths(const QStringList &netbiosPaths) { d->netbiosPaths = netbiosPaths; }
modes/samba/sambaConfiguration.h:    void setSambaAccessPaths(const QStringList &sambaAccessPaths) { d->sambaAccessPaths = sambaAccessPaths; }
modes/samba/sambaLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/netbiosLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/netbiosLogMode.cpp:    d->logModeConfiguration = sambaConfiguration;
modes/samba/netbiosLogMode.cpp:    d->logModeConfigurationWidget = sambaConfigurationWidget;
modes/samba/netbiosLogMode.cpp:    d->itemBuilder = itemBuilder;
modes/samba/netbiosLogMode.cpp:    d->action = createDefaultAction();
modes/samba/netbiosLogMode.cpp:    d->action->setToolTip(i18n("Display the Netbios log."));
modes/samba/netbiosLogMode.cpp:    d->action->setWhatsThis(
modes/samba/netbiosLogMode.cpp:    checkLogFilesPresence(sambaConfiguration->netbiosPaths());
modes/samba/netbiosLogMode.cpp:    return sambaConfiguration->findNoModeLogFiles(sambaConfiguration->netbiosPaths());
modes/samba/sambaLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaLogMode.cpp:    d->logModeConfiguration = sambaConfiguration;
modes/samba/sambaLogMode.cpp:    d->logModeConfigurationWidget = sambaConfigurationWidget;
modes/samba/sambaLogMode.cpp:    d->itemBuilder = itemBuilder;
modes/samba/sambaLogMode.cpp:    d->action = createDefaultAction();
modes/samba/sambaLogMode.cpp:    d->action->setToolTip(i18n("Display the Samba log."));
modes/samba/sambaLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/samba/sambaLogMode.cpp:    checkLogFilesPresence(sambaConfiguration->sambaPaths());
modes/samba/sambaLogMode.cpp:    return sambaConfiguration->findNoModeLogFiles(sambaConfiguration->sambaPaths());
modes/samba/sambaFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaAnalyzer.h:     * Copyright Andrew Tridgell and the Samba Team 1994-2004
modes/samba/sambaAnalyzer.h:     * Copyright Andrew Tridgell and the Samba Team 1994-2004
modes/samba/sambaAnalyzer.h:        if (dateBegin != -1) {
modes/samba/sambaAnalyzer.h:            QString strDate = line.mid(dateBegin + 1, dateEnd - dateBegin - 1);
modes/samba/sambaAnalyzer.h:        if (line.indexOf(QLatin1String("  ")) != -1) {
modes/samba/sambaAnalyzer.h:                QStringList list = currentLogLine->logItems();
modes/samba/sambaAnalyzer.h:                currentLogLine->setLogItems(list);
modes/samba/sambaAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/samba/sambaItemBuilder.h:        result.append(labelMessageFormat(i18n("Date:"), formatDate(line->time())));
modes/samba/sambaItemBuilder.h:        result.append(labelMessageFormat(i18n("Level:"), line->logLevel()->name()));
modes/samba/netbiosLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/netbiosLogMode.h:#define NETBIOS_MODE_ICON "folder-remote"
modes/samba/sambaItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaConfigurationWidget.h:        this->setLayout(layout);
modes/samba/sambaConfigurationWidget.h:        sambaPathsId = sambaFileList->addCategory(i18n("Samba Log Files"), i18n("Add Samba File..."));
modes/samba/sambaConfigurationWidget.h:            = sambaFileList->addCategory(i18n("Samba Access Log Files"), i18n("Add Samba Access File..."));
modes/samba/sambaConfigurationWidget.h:        netbiosPathsId = sambaFileList->addCategory(i18n("Netbios Log Files"), i18n("Add Netbios File..."));
modes/samba/sambaConfigurationWidget.h:        layout->addWidget(sambaFileList);
modes/samba/sambaConfigurationWidget.h:                                                     ->logModeConfiguration<SambaConfiguration *>();
modes/samba/sambaConfigurationWidget.h:        sambaConfiguration->setSambaPaths(sambaFileList->paths(sambaPathsId));
modes/samba/sambaConfigurationWidget.h:        sambaConfiguration->setSambaAccessPaths(sambaFileList->paths(sambaAccessPathsId));
modes/samba/sambaConfigurationWidget.h:        sambaConfiguration->setNetbiosPaths(sambaFileList->paths(netbiosPathsId));
modes/samba/sambaConfigurationWidget.h:                                                     ->logModeConfiguration<SambaConfiguration *>();
modes/samba/sambaConfigurationWidget.h:        sambaFileList->removeAllItems();
modes/samba/sambaConfigurationWidget.h:        sambaFileList->addPaths(sambaPathsId, sambaConfiguration->sambaPaths());
modes/samba/sambaConfigurationWidget.h:        sambaFileList->addPaths(sambaAccessPathsId, sambaConfiguration->sambaAccessPaths());
modes/samba/sambaConfigurationWidget.h:        sambaFileList->addPaths(netbiosPathsId, sambaConfiguration->netbiosPaths());
modes/samba/sambaConfigurationWidget.h:        if (sambaFileList->isOneOfCategoryEmpty() == true) {
modes/samba/sambaFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaFactory.cpp:    bool sambaLogsExist = sambaLogMode->filesExist();
modes/samba/sambaFactory.cpp:    bool sambaAccessLogsExist = sambaAccessLogMode->filesExist();
modes/samba/sambaFactory.cpp:    bool sambaNetbiosLogsExist = sambaNetbiosLogMode->filesExist();
modes/samba/sambaFactory.cpp:        multipleActions->addInnerAction(sambaLogMode->action());
modes/samba/sambaFactory.cpp:        multipleActions->addInnerAction(sambaAccessLogMode->action());
modes/samba/sambaFactory.cpp:        multipleActions->addInnerAction(sambaNetbiosLogMode->action());
modes/samba/sambaFactory.cpp:    multipleActions->setCategory(LogModeAction::ServicesCategory);
modes/samba/sambaAccessLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaAccessLogMode.cpp:    d->logModeConfiguration = sambaConfiguration;
modes/samba/sambaAccessLogMode.cpp:    d->logModeConfigurationWidget = sambaConfigurationWidget;
modes/samba/sambaAccessLogMode.cpp:    d->itemBuilder = itemBuilder;
modes/samba/sambaAccessLogMode.cpp:    d->action = createDefaultAction();
modes/samba/sambaAccessLogMode.cpp:    d->action->setToolTip(i18n("Display the Samba Access log."));
modes/samba/sambaAccessLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/samba/sambaAccessLogMode.cpp:    checkLogFilesPresence(sambaConfiguration->sambaAccessPaths());
modes/samba/sambaAccessLogMode.cpp:    return sambaConfiguration->findNoModeLogFiles(sambaConfiguration->sambaAccessPaths());
modes/samba/sambaConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaAccessLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/samba/sambaAccessLogMode.h:#define SAMBA_ACCESS_MODE_ICON "network-workgroup"
modes/daemon/daemonConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("DaemonLogMode"));
modes/daemon/daemonConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/daemon.log.* | head -n 2 \"";
modes/daemon/daemonConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->daemonPaths, defaultDaemonPaths,
modes/daemon/daemonConfiguration.h:    QStringList daemonPaths() const { return d->daemonPaths; }
modes/daemon/daemonConfiguration.h:    void setDaemonPaths(const QStringList &daemonPaths) { d->daemonPaths = daemonPaths; }
modes/daemon/daemonLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonLogMode.cpp:    d->logModeConfiguration = QSharedPointer<DaemonConfiguration>(new DaemonConfiguration());
modes/daemon/daemonLogMode.cpp:    d->logModeConfigurationWidget = new DaemonConfigurationWidget();
modes/daemon/daemonLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/daemon/daemonLogMode.cpp:    d->action = createDefaultAction();
modes/daemon/daemonLogMode.cpp:    d->action->setToolTip(i18n("Display the daemons' logs."));
modes/daemon/daemonLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/daemon/daemonLogMode.cpp:    checkLogFilesPresence(configuration->daemonPaths());
modes/daemon/daemonLogMode.cpp:    return configuration->findGenericLogFiles(configuration->daemonPaths());
modes/daemon/daemonLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonFactory.cpp:    if (!logMode->filesExist())
modes/daemon/daemonFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/daemon/daemonConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonConfigurationWidget.h:        this->setLayout(layout);
modes/daemon/daemonConfigurationWidget.h:        layout->addWidget(fileList);
modes/daemon/daemonConfigurationWidget.h:                                                       ->logModeConfiguration<DaemonConfiguration *>();
modes/daemon/daemonConfigurationWidget.h:        daemonConfiguration->setDaemonPaths(fileList->paths());
modes/daemon/daemonConfigurationWidget.h:                                                       ->logModeConfiguration<DaemonConfiguration *>();
modes/daemon/daemonConfigurationWidget.h:        fileList->removeAllItems();
modes/daemon/daemonConfigurationWidget.h:        fileList->addPaths(daemonConfiguration->daemonPaths());
modes/daemon/daemonConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/daemon/daemonConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/daemon/daemonFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("RkhunterLogMode"));
modes/rkhunter/rkhunterConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/mx_boot_repair* | head -n 3 \"";
modes/rkhunter/rkhunterConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->rkhunterPaths, defaultRkhunterPaths,
modes/rkhunter/rkhunterConfiguration.h:    QStringList rkhunterPaths() const { return d->rkhunterPaths; }
modes/rkhunter/rkhunterConfiguration.h:    void setRkhunterPaths(const QStringList &rkhunterPaths) { d->rkhunterPaths = rkhunterPaths; }
modes/rkhunter/rkhunterLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterLogMode.cpp:    d->logModeConfiguration = QSharedPointer<RkhunterConfiguration>(new RkhunterConfiguration());
modes/rkhunter/rkhunterLogMode.cpp:    d->logModeConfigurationWidget = new RkhunterConfigurationWidget();
modes/rkhunter/rkhunterLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/rkhunter/rkhunterLogMode.cpp:    d->action = createDefaultAction();
modes/rkhunter/rkhunterLogMode.cpp:    d->action->setToolTip(i18n("Rootkit Hunter Log: /var/log/rkhunter.log"));
modes/rkhunter/rkhunterLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/rkhunter/rkhunterLogMode.cpp:    checkLogFilesPresence(configuration->rkhunterPaths());
modes/rkhunter/rkhunterLogMode.cpp:    return configuration->findGenericLogFiles(configuration->rkhunterPaths());
modes/rkhunter/rkhunterLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterConfigurationWidget.h:        this->setLayout(layout);
modes/rkhunter/rkhunterConfigurationWidget.h:        layout->addWidget(fileList);
modes/rkhunter/rkhunterConfigurationWidget.h:                                                       ->logModeConfiguration<RkhunterConfiguration *>();
modes/rkhunter/rkhunterConfigurationWidget.h:        rkhunterConfiguration->setRkhunterPaths(fileList->paths());
modes/rkhunter/rkhunterConfigurationWidget.h:                                                       ->logModeConfiguration<RkhunterConfiguration *>();
modes/rkhunter/rkhunterConfigurationWidget.h:        fileList->removeAllItems();
modes/rkhunter/rkhunterConfigurationWidget.h:        fileList->addPaths(rkhunterConfiguration->rkhunterPaths());
modes/rkhunter/rkhunterConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/rkhunter/rkhunterConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/rkhunter/rkhunterFactory.cpp:    if (!logMode->filesExist())
modes/rkhunter/rkhunterFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/xsession/xsessionAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionAnalyzer.h:        XSessionConfiguration *configuration = logMode->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionAnalyzer.h:        if (configuration->isIgnoreXorgErrors())
modes/xsession/xsessionAnalyzer.h:        if (classPrototypePosition != -1 && programPos == classPrototypePosition) {
modes/xsession/xsessionAnalyzer.h:        if (programPos == -1) {
modes/xsession/xsessionAnalyzer.h:            message = logLine.right(logLine.length() - programPos - 1);
modes/xsession/xsessionAnalyzer.h:        XSessionConfiguration *configuration = logMode->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionAnalyzer.h:        if (configuration->isIgnoreXorgErrors() && configuration->xorgErrorKeywords().contains(program))
modes/xsession/xsessionAnalyzer.h:        XSessionConfiguration *configuration = logMode->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionAnalyzer.h:        return hasKeywords(message, configuration->warningKeywords());
modes/xsession/xsessionAnalyzer.h:        XSessionConfiguration *configuration = logMode->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionAnalyzer.h:        return hasKeywords(message, configuration->errorKeywords());
modes/xsession/xsessionFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionItemBuilder.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("XSessionLogMode"));
modes/xsession/xsessionConfiguration.h:        configuration->addItemString(QStringLiteral("LogFilePath"), d->xsessionPath,
modes/xsession/xsessionConfiguration.h:                                     QStringLiteral("~/.xsession-errors"), QStringLiteral("LogFilePath"));
modes/xsession/xsessionConfiguration.h:        configuration->addItemBool(QStringLiteral("IgnoreXorgErrors"), d->ignoreXorgErrors, false,
modes/xsession/xsessionConfiguration.h:        configuration->addItemStringList(QStringLiteral("XorgErrorKeywords"), d->xorgErrorKeywords,
modes/xsession/xsessionConfiguration.h:        configuration->addItemStringList(QStringLiteral("WarningKeywords"), d->warningKeywords,
modes/xsession/xsessionConfiguration.h:        configuration->addItemStringList(QStringLiteral("ErrorKeywords"), d->errorKeywords,
modes/xsession/xsessionConfiguration.h:    QStringList xorgErrorKeywords() const { return d->xorgErrorKeywords; }
modes/xsession/xsessionConfiguration.h:    bool isIgnoreXorgErrors() const { return d->ignoreXorgErrors; }
modes/xsession/xsessionConfiguration.h:    void setIgnoreXorgErrors(bool ignore) { d->ignoreXorgErrors = ignore; }
modes/xsession/xsessionConfiguration.h:    QString xsessionPath() const { return d->xsessionPath; }
modes/xsession/xsessionConfiguration.h:    void setXSessionPath(const QString &xsessionPath) { d->xsessionPath = xsessionPath; }
modes/xsession/xsessionConfiguration.h:    QStringList warningKeywords() const { return d->warningKeywords; }
modes/xsession/xsessionConfiguration.h:    QStringList errorKeywords() const { return d->errorKeywords; }
modes/xsession/xsessionConfigurationWidgetBase.ui:<?xml version="1.0" encoding="UTF-8"?>
modes/xsession/xsessionConfigurationWidgetBase.ui:         <string>&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Check this option to remove X.org errors.&lt;/p&gt;&lt;p style=&quot;margin-bottom:0px&quot;&gt;The following lines will be ignored:&lt;/p&gt;</string>
modes/xsession/xsessionConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setVisible(false);
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setMessageType(KMessageWidget::Warning);
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setText(i18n("Log file does not exist. Mode will be unavailable."));
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setCloseButtonVisible(false);
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/warning.svg")));
modes/xsession/xsessionConfigurationWidget.h:        verticalLayout->insertWidget(0, warningBox);
modes/xsession/xsessionConfigurationWidget.h:        xsessionUrlRequester->setToolTip(
modes/xsession/xsessionConfigurationWidget.h:            i18n("You can type or choose the X Session log file (example: <i>~/.xsession-errors</i>)."));
modes/xsession/xsessionConfigurationWidget.h:        xsessionUrlRequester->setWhatsThis(i18n(
modes/xsession/xsessionConfigurationWidget.h:            "the <b>X Session log</b> menu. Generally, its name is <i>~/.xsession-errors</i>"));
modes/xsession/xsessionConfigurationWidget.h:        xsessionUrlRequester->setMode(KFile::File);
modes/xsession/xsessionConfigurationWidget.h:        xsessionUrlRequester->setEnabled(true);
modes/xsession/xsessionConfigurationWidget.h:                                                   ->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionConfigurationWidget.h:        configuration->setXSessionPath(xsessionUrlRequester->url().path());
modes/xsession/xsessionConfigurationWidget.h:        configuration->setIgnoreXorgErrors(ignoreXorgErrors->isChecked());
modes/xsession/xsessionConfigurationWidget.h:                                                   ->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionConfigurationWidget.h:        QString path = configuration->xsessionPath();
modes/xsession/xsessionConfigurationWidget.h:        warningBox->setVisible(!fileInfo.exists());
modes/xsession/xsessionConfigurationWidget.h:        xsessionUrlRequester->setUrl(QUrl::fromLocalFile(path));
modes/xsession/xsessionConfigurationWidget.h:        ignoreXorgErrors->setChecked(configuration->isIgnoreXorgErrors());
modes/xsession/xsessionConfigurationWidget.h:        if (xsessionUrlRequester->url().path().isEmpty() == false) {
modes/xsession/xsessionConfigurationWidget.h:                                                   ->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionConfigurationWidget.h:            QString text = xorgErrorsDescription->text();
modes/xsession/xsessionConfigurationWidget.h:            text.append(QLatin1String("<ul style='margin-top:0px;margin-bottom:0px'>"));
modes/xsession/xsessionConfigurationWidget.h:            foreach (const QString &xorgErrorKeyword, configuration->xorgErrorKeywords()) {
modes/xsession/xsessionConfigurationWidget.h:            xorgErrorsDescription->setText(text);
modes/xsession/xsessionLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionLogMode.h:#define X_SESSION_MODE_ICON "/usr/local/share/icons/logavista/startup.svg"
modes/xsession/xsessionLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionLogMode.cpp:    d->logModeConfiguration = QSharedPointer<XSessionConfiguration>(new XSessionConfiguration());
modes/xsession/xsessionLogMode.cpp:    d->logModeConfigurationWidget = new XSessionConfigurationWidget();
modes/xsession/xsessionLogMode.cpp:    d->itemBuilder = new XSessionItemBuilder();
modes/xsession/xsessionLogMode.cpp:    d->action = createDefaultAction();
modes/xsession/xsessionLogMode.cpp:    d->action->setToolTip(i18n("Display the X Session log."));
modes/xsession/xsessionLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/xsession/xsessionLogMode.cpp:    checkLogFilesPresence(QStringList() << configuration->xsessionPath());
modes/xsession/xsessionLogMode.cpp:                                               ->logModeConfiguration<XSessionConfiguration *>();
modes/xsession/xsessionLogMode.cpp:    logFiles.append(configuration->findGenericLogFile(configuration->xsessionPath()));
modes/xsession/xsessionItemBuilder.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionItemBuilder.h:        LogLine *line = item->logLine();
modes/xsession/xsessionItemBuilder.h:        item->setText(0, QLatin1String(""));
modes/xsession/xsessionItemBuilder.h:        foreach (const QString &label, line->logItems()) {
modes/xsession/xsessionItemBuilder.h:            item->setText(i, label);
modes/xsession/xsessionItemBuilder.h:        item->setIcon(0, QIcon(line->logLevel()->pixmap()));
modes/xsession/xsessionItemBuilder.h:        QListIterator<QString> it(line->logItems());
modes/xsession/xsessionItemBuilder.h:        result.append(labelMessageFormat(i18n("Original file:"), line->sourceFileName()));
modes/xsession/xsessionFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/xsession/xsessionFactory.cpp:    if (!logMode->filesExist())
modes/xsession/xsessionFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/xsession/xsessionFactory.cpp:    logModeAction->setCategory(LogModeAction::OthersCategory);
modes/xsession/xsessionAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallLogMode.cpp:    d->logModeConfiguration = QSharedPointer<FirewallConfiguration>(new FirewallConfiguration());
modes/firewall/firewallLogMode.cpp:    d->logModeConfigurationWidget = new FirewallConfigurationWidget();
modes/firewall/firewallLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/firewall/firewallLogMode.cpp:    d->action = createDefaultAction();
modes/firewall/firewallLogMode.cpp:    d->action->setToolTip(i18n("Firewall log ufw.log"));
modes/firewall/firewallLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/firewall/firewallLogMode.cpp:    checkLogFilesPresence(configuration->firewallPaths());
modes/firewall/firewallLogMode.cpp:    return configuration->findGenericLogFiles(configuration->firewallPaths());
modes/firewall/firewallLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("FirewallLogMode"));
modes/firewall/firewallConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->firewallPaths, defaultFirewallPaths,
modes/firewall/firewallConfiguration.h:    QStringList firewallPaths() const { return d->firewallPaths; }
modes/firewall/firewallConfiguration.h:    void setFirewallPaths(const QStringList &firewallPaths) { d->firewallPaths = firewallPaths; }
modes/firewall/firewallConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallConfigurationWidget.h:        this->setLayout(layout);
modes/firewall/firewallConfigurationWidget.h:        layout->addWidget(fileList);
modes/firewall/firewallConfigurationWidget.h:                                                       ->logModeConfiguration<FirewallConfiguration *>();
modes/firewall/firewallConfigurationWidget.h:        firewallConfiguration->setFirewallPaths(fileList->paths());
modes/firewall/firewallConfigurationWidget.h:                                                       ->logModeConfiguration<FirewallConfiguration *>();
modes/firewall/firewallConfigurationWidget.h:        fileList->removeAllItems();
modes/firewall/firewallConfigurationWidget.h:        fileList->addPaths(firewallConfiguration->firewallPaths());
modes/firewall/firewallConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/firewall/firewallFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/firewall/firewallFactory.cpp:    if (!logMode->filesExist())
modes/firewall/firewallFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/system/systemConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemConfigurationWidget.h:        this->setLayout(layout);
modes/system/systemConfigurationWidget.h:        layout->addWidget(fileList);
modes/system/systemConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/system/systemConfigurationWidget.h:                                                       ->logModeConfiguration<SystemConfiguration *>();
modes/system/systemConfigurationWidget.h:        systemConfiguration->setLogFilesPaths(fileList->paths());
modes/system/systemConfigurationWidget.h:        systemConfiguration->setLogFilesLevels(fileList->levels());
modes/system/systemConfigurationWidget.h:                                                       ->logModeConfiguration<SystemConfiguration *>();
modes/system/systemConfigurationWidget.h:        fileList->removeAllItems();
modes/system/systemConfigurationWidget.h:        fileList->addPaths(systemConfiguration->logFilesPaths(), systemConfiguration->logFilesLevels());
modes/system/systemAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemFactory.cpp:    if (!logMode->filesExist())
modes/system/systemFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/system/systemLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemLogMode.cpp:    d->logModeConfiguration = QSharedPointer<SystemConfiguration>(new SystemConfiguration());
modes/system/systemLogMode.cpp:    d->logModeConfigurationWidget = new SystemConfigurationWidget();
modes/system/systemLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/system/systemLogMode.cpp:    d->action = createDefaultAction();
modes/system/systemLogMode.cpp:    d->action->setToolTip(i18n("Display /var/log/system*"));
modes/system/systemLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/system/systemLogMode.cpp:        "Displays the system log in the current tab. This log is generally used by non-specialized processes "
modes/system/systemLogMode.cpp:    checkLogFilesPresence(logModeConfiguration<SystemConfiguration *>()->logFilesPaths());
modes/system/systemLogMode.cpp:    return logModeConfiguration<SystemConfiguration *>()->findGenericLogFiles();
modes/system/systemConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/system/systemConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/parsingHelper.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/parsingHelper.cpp:    mapHTTPResponse[QLatin1String("203")] = QLatin1String("Non-Authoritative Information");
modes/base/parsingHelper.cpp:    mapHTTPResponse[QLatin1String("414")] = QLatin1String("Request-URI Too Long");
modes/base/parsingHelper.cpp:    if (firstPosition == -1) {
modes/base/multipleFileList.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/logLevelSelectionDialogBase.ui:p, li { white-space: pre-wrap; }
modes/base/logLevelSelectionDialogBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/logLevelSelectionDialogBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">List of existing log levels&lt;/p>&lt;/body>&lt;/html></string>
modes/base/logLevelSelectionDialogBase.ui:p, li { white-space: pre-wrap; }
modes/base/logLevelSelectionDialogBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/logLevelSelectionDialogBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">This is the list of all existing log levels. &lt;/p>
modes/base/logLevelSelectionDialogBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Please select one of them to be used for the files selected on the list.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/syslogAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/syslogAnalyzer.cpp:    int monthNum = ParsingHelper::instance()->parseSyslogMonth(month);
modes/base/syslogAnalyzer.cpp:    if (nextSpace < nextDoubleDot || nextDoubleDot == -1) {
modes/base/syslogAnalyzer.cpp:    if (nextDoubleDot != -1) {
modes/base/syslogAnalyzer.cpp:            if (squareBracket != -1) {
modes/base/syslogAnalyzer.cpp:            || line.contains(QLatin1String("-- MARK --"))) {
modes/base/syslogAnalyzer2.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/syslogAnalyzer2.cpp:        if ((pattern_emergency->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_critical->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_alert->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_error->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_warning->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_notice->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:        } else if ((pattern_debug->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            if ((pattern_emergency->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_critical->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_alert->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_error->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_warning->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_notice->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:            } else if ((pattern_debug->match(level_message).hasMatch())) {
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern323a(R"Q(^.*(\w{3,3})-(\d{1,2})-(\w{3,3}) (\d{4,4}) ([:\d]{8,8}) ([-+\d ]{4,5})(.*))Q");
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern323b(R"Q(^.*(\w{3,3})[-\ ]{1,2}(\d{1,2})[-\ ]{1,1}(\w{3,3}) (\d{4,4}) ([:\d]{8,8})(\w{2,2}) (\S{2,}) (.*))Q");
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern328host(R"Q(^.*(\w{3,3})[-\ ]{1,2}(\d{1,2})[-\ ]{1,1}([:\d]{8,8}) (\w+) (\w+)(.*))Q");
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern332a(R"Q(^.*(\w{3,3})[-\ ]{1,1}(\w{3,3})[-\ ]{1,1}(\d{2,2}) ([:\d]{8,12}) (\w{3,}) (\d{4,4}) (.*))Q");
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern332b(R"Q(^.*(\w{3,3})[-\ ]{1,1}(\w{3,3})[-\ ]{1,1}(\d{2,2}) ([:\d]{8,12}) (\w{3,}) (\d{4,4}))Q");
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern422a(R"Q(^(\d{4,4})[-\ ]{1,1}(\d{1,2})[-\ ]{1,1}(\d{2,2}) ([:\.\d]{12,12}) (\w{3,})(.*))Q");     
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern422b(R"Q(^(\d{4,4})[-\ ]{1,1}(\d{1,2})[-\ ]{1,1}(\d{2,2}) ([:\.\d]{8,8})[\s:]{1,}(.*))Q"); 
modes/base/syslogAnalyzer2.cpp:    QRegularExpression pattern422c(R"Q(^(\d{4,4})/(\d{2,2})/(\d{2,2}) ([:\.\d]{12,12}) \(UTC[-+]{1,1}([:\d]{4,4})\)(.*))Q"); 
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:        level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:            level = get_standard_level(logLine); // This is returning text to a short all-caps standardized log level
modes/base/syslogAnalyzer2.cpp:    // A decision needs to be made on a case-by-case basis as to whether to include the hostname.
modes/base/syslogAnalyzer2.cpp:    // Some of the logging formats actually have the hostname and process name. This is going to be super-useful in a merge
modes/base/syslogAnalyzer2.cpp:    // Filenames: pm-*, mail* will have their process name injected & the hostname parsed
modes/base/syslogAnalyzer2.cpp:    // Filenames: ddm*, nvid*, format*, alternatives*, trim*, teamviewer*, mx-*, rkhunter*, ufw*, gufw*, tiger*, hibernate*, sleep*, openvpn*, cups/access*, 
modes/base/syslogAnalyzer2.cpp:    } else if (tmp_filename.indexOf(QString("mx-snapshot")) >= 0) {
modes/base/syslogAnalyzer2.cpp:        process = "mx-snapshot";
modes/base/syslogAnalyzer2.cpp:    } else if (tmp_filename.indexOf(QString("mx-boot-repair")) >= 0) {
modes/base/syslogAnalyzer2.cpp:        process = "mx-boot-repair";
modes/base/syslogAnalyzer2.cpp:    } else if (tmp_filename.indexOf(QString("mx-live-usb-maker")) >= 0) {
modes/base/syslogAnalyzer2.cpp:        process = "ms-live-usb-maker";
modes/base/syslogAnalyzer2.cpp:        process = "ufw-firewall";
modes/base/syslogAnalyzer2.cpp:    } else if (tmp_filename.indexOf(QString("pm-powersave")) >= 0) {
modes/base/syslogAnalyzer2.cpp:        process = "pm-powersave";
modes/base/syslogAnalyzer2.cpp:    } else if (tmp_filename.indexOf(QString("pm-suspend")) >= 0) {
modes/base/syslogAnalyzer2.cpp:        process = "pm-suspend";
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Delete the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Deletes the selected files of the list.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Remove all files&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Remove all files of the list, even if they are not selected.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Move up the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Moves up the selected files in the list. This option allows the files to be read &lt;span style=" font-weight:600;">in first&lt;/span> by KSystemLog.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Move down the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/multipleFileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/multipleFileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Moves down the selected files in the list. This option allows the files to be read &lt;span style=" font-weight:600;">at last&lt;/span> by KSystemLog.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/multipleFileListBase.ui:         <string>&lt;p style='margin-top:0px;margin-bottom:0px;'>&lt;b>Notes:&lt;/b>&lt;/p>&lt;ul style='margin-top:0px'>&lt;li>Files are read using the order of this list.&lt;/li>&lt;li>Compressed and plain text files are accepted &lt;i>(*.log, *.gz, *.bz2,...)&lt;/i>.&lt;/li>&lt;li>Use the &lt;b>'*'&lt;/b> joker to select multiple log files when adding files.&lt;/li>&lt;/ul></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Choose a new file&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Opens a dialog box to choose a new file to be added to the list.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Delete the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Deletes the files selected on the list.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Remove all files&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Remove all the files on the list, even if they are not selected.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Move up the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Moves the selected files up in the list. This option allows the files to be read &lt;span style=" font-weight:600;">in first&lt;/span> by KSystemLog.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Move down the current file(s)&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Moves the selected files down in the list. This option allows the files to be read &lt;span style=" font-weight:600;">in last&lt;/span> by KSystemLog.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:         <string>&lt;p style='margin-top:0px;margin-bottom:0px;'>&lt;b>Notes:&lt;/b>&lt;/p>&lt;ul style='margin-top:0px'>&lt;li>Files are read using the order of this list.&lt;/li>&lt;li>Compressed and plain text files are accepted &lt;i>(*.log, *.gz, *.bz2,...)&lt;/i>.&lt;/li>&lt;li>Use the &lt;b>'*'&lt;/b> wildcard to select multiple log files when adding files.&lt;/li>&lt;/ul></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">List of files used by this log type.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileListBase.ui:p, li { white-space: pre-wrap; }
modes/base/fileListBase.ui:&lt;/style>&lt;/head>&lt;body style=" font-family:'Sans Serif'; font-size:9pt; font-weight:400; font-style:normal;">
modes/base/fileListBase.ui:&lt;p style=" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;">Here is a list of every file that will be read by KSystemLog to display the current log lines.&lt;/p>&lt;/body>&lt;/html></string>
modes/base/fileList.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/fileListHelper.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/fileListHelper.cpp:    action->setIcon(icon);
modes/base/fileListHelper.cpp:    action->setText(button->text());
modes/base/fileListHelper.cpp:    button->setIcon(icon);
modes/base/fileListHelper.cpp:    button->addAction(action);
modes/base/fileListHelper.cpp:    fileList->addAction(action);
modes/base/fileListHelper.cpp:    QDir directory = QDir(url.path().left(url.path().count() - url.fileName().count()));
modes/base/fileListHelper.cpp:    button->setEnabled(enabled);
modes/base/fileListHelper.cpp:    QList<QAction *> actions = button->actions();
modes/base/fileListHelper.cpp:        action->setEnabled(enabled);
modes/base/multipleFileList.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/multipleFileList.cpp:    warningBox->setVisible(false);
modes/base/multipleFileList.cpp:    warningBox->setMessageType(KMessageWidget::Warning);
modes/base/multipleFileList.cpp:    warningBox->setText(i18n("Some log files do not exist.\n"
modes/base/multipleFileList.cpp:    warningBox->setCloseButtonVisible(false);
modes/base/multipleFileList.cpp:    warningBox->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/warning.svg")));
modes/base/multipleFileList.cpp:    vboxLayout->insertWidget(1, warningBox);
modes/base/multipleFileList.cpp:    description->setText(descriptionText);
modes/base/multipleFileList.cpp:    fileListHelper.prepareButton(modify, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/open.svg")), this,
modes/base/multipleFileList.cpp:    fileList->header()->setVisible(false);
modes/base/multipleFileList.cpp:    separator->setSeparator(true);
modes/base/multipleFileList.cpp:    fileList->addAction(separator);
modes/base/multipleFileList.cpp:    fileListHelper.prepareButton(remove, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/symbolic.svg")), this,
modes/base/multipleFileList.cpp:    fileListHelper.prepareButton(up, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/up.svg")), this, SLOT(moveUpItem()),
modes/base/multipleFileList.cpp:    fileListHelper.prepareButton(down, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/down.svg")), this, SLOT(moveDownItem()),
modes/base/multipleFileList.cpp:    fileListHelper.prepareButton(removeAll, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/empty.png")), this,
modes/base/multipleFileList.cpp:    QList<QTreeWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/multipleFileList.cpp:        int categoryIndex = fileList->indexOfTopLevelItem(categoryItem);
modes/base/multipleFileList.cpp:        if (categoryItem->indexOfChild(selectedItem) == 0)
modes/base/multipleFileList.cpp:        if (categoryItem->indexOfChild(selectedItem) == categoryCount(categoryIndex) - 1)
modes/base/multipleFileList.cpp:    for (int i = 0; i < fileList->topLevelItemCount(); ++i) {
modes/base/multipleFileList.cpp:    for (int i = 0; i < fileList->topLevelItemCount(); ++i) {
modes/base/multipleFileList.cpp:    QTreeWidgetItem *item = fileList->topLevelItem(index);
modes/base/multipleFileList.cpp:    for (int i = 0; i < item->childCount(); ++i) {
modes/base/multipleFileList.cpp:        QTreeWidgetItem *childItem = item->child(i);
modes/base/multipleFileList.cpp:    item->setExpanded(true);
modes/base/multipleFileList.cpp:    QFont font = item->font(0);
modes/base/multipleFileList.cpp:    item->setFont(0, font);
modes/base/multipleFileList.cpp:    int index = fileList->indexOfTopLevelItem(item);
modes/base/multipleFileList.cpp:        = fileListHelper.prepareButtonAndAction(addButton, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/new.svg")));
modes/base/multipleFileList.cpp:    fileList->insertAction(fileList->actions().at(addButtons.buttons().size()), action);
modes/base/multipleFileList.cpp:    vboxLayout1->insertWidget(index, addButton);
modes/base/multipleFileList.cpp:    QTreeWidgetItem *categoryItem = fileList->topLevelItem(category);
modes/base/multipleFileList.cpp:    logDebug() << "Adding" << path << "to" << categoryItem->text(0);
modes/base/multipleFileList.cpp:        item->setForeground(0, Qt::red);
modes/base/multipleFileList.cpp:    categoryItem->addChild(item);
modes/base/multipleFileList.cpp:    categoryItem->setExpanded(true);
modes/base/multipleFileList.cpp:    logDebug() << "Finding Category of" << childItem->text(0);
modes/base/multipleFileList.cpp:    for (int i = 0; i < fileList->topLevelItemCount(); ++i) {
modes/base/multipleFileList.cpp:        QTreeWidgetItem *item = fileList->topLevelItem(i);
modes/base/multipleFileList.cpp:        if (item->indexOfChild(childItem) != -1) {
modes/base/multipleFileList.cpp:            logDebug() << "Category of" << childItem->text(0) << "is" << item->text(0);
modes/base/multipleFileList.cpp:    logDebug() << "No Category of" << childItem->text(0);
modes/base/multipleFileList.cpp:    QList<QTreeWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/multipleFileList.cpp:    QString previousPath = item->text(0);
modes/base/multipleFileList.cpp:        item->setText(0, paths.at(0));
modes/base/multipleFileList.cpp:    QList<QTreeWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/multipleFileList.cpp:        delete categoryItem->takeChild(categoryItem->indexOfChild(item));
modes/base/multipleFileList.cpp:    QList<QTreeWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/multipleFileList.cpp:    int itemIndex = categoryItem->indexOfChild(item);
modes/base/multipleFileList.cpp:    categoryItem->takeChild(itemIndex);
modes/base/multipleFileList.cpp:    categoryItem->insertChild(itemIndex + direction, item);
modes/base/multipleFileList.cpp:    fileList->setCurrentItem(item);
modes/base/multipleFileList.cpp:    // item->setSelected(true);
modes/base/multipleFileList.cpp:    moveItem(-1);
modes/base/multipleFileList.cpp:        QList<QTreeWidgetItem *> children = item->takeChildren();
modes/base/multipleFileList.cpp:    QList<QTreeWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/multipleFileList.cpp:        item->setSelected(false);
modes/base/multipleFileList.cpp:    for (int i = 0; i < fileList->topLevelItemCount(); ++i) {
modes/base/multipleFileList.cpp:        QTreeWidgetItem *categoryItem = fileList->topLevelItem(i);
modes/base/multipleFileList.cpp:        if (categoryItem->childCount() == 0) {
modes/base/multipleFileList.cpp:    for (int categoryIndex = 0; categoryIndex < fileList->topLevelItemCount(); ++categoryIndex) {
modes/base/multipleFileList.cpp:        QTreeWidgetItem *categoryItem = fileList->topLevelItem(categoryIndex);
modes/base/multipleFileList.cpp:        logDebug() << "Removing empty items of " << categoryItem->text(0);
modes/base/multipleFileList.cpp:        for (int i = 0; i < categoryItem->childCount(); ++i) {
modes/base/multipleFileList.cpp:            QTreeWidgetItem *childItem = categoryItem->child(i);
modes/base/multipleFileList.cpp:            if (isEmptyItem(childItem) == true && categoryItem->childCount() > 1) {
modes/base/multipleFileList.cpp:                delete categoryItem->takeChild(i);
modes/base/multipleFileList.cpp:        logDebug() << "Empty items of " << categoryItem->text(0) << "removed";
modes/base/multipleFileList.cpp:    if (item->font(0).italic() == true)
modes/base/multipleFileList.cpp:    item->setExpanded(true);
modes/base/multipleFileList.cpp:    QFont font = emptyItem->font(0);
modes/base/multipleFileList.cpp:    emptyItem->setFont(0, font);
modes/base/multipleFileList.cpp:    QTreeWidgetItem *categoryItem = fileList->topLevelItem(category);
modes/base/multipleFileList.cpp:    warningBox->setVisible(missingFiles);
modes/base/multipleFileList.cpp:    QTreeWidgetItem *categoryItem = fileList->topLevelItem(category);
modes/base/multipleFileList.cpp:        if (categoryItem->indexOfChild(item) != -1) {
modes/base/multipleFileList.cpp:            paths.append(item->text(0));
modes/base/logLevelSelectionDialog.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/logLevelSelectionDialog.cpp:    QPushButton *okButton = buttonBox->button(QDialogButtonBox::Ok);
modes/base/logLevelSelectionDialog.cpp:    okButton->setIcon(KStandardGuiItem::ok().icon());
modes/base/logLevelSelectionDialog.cpp:    QPushButton *cancelButton = buttonBox->button(QDialogButtonBox::Cancel);
modes/base/logLevelSelectionDialog.cpp:    cancelButton->setIcon(KStandardGuiItem::cancel().icon());
modes/base/logLevelSelectionDialog.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/genericConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/genericConfiguration.cpp:    configuration->setCurrentGroup(configurationGroup);
modes/base/genericConfiguration.cpp:    configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->logFilesPaths, defaultLogFilesPaths,
modes/base/genericConfiguration.cpp:    configuration->addItemIntList(QStringLiteral("LogFilesLevels"), d->logFilesLevels, defaultLogFilesLevels,
modes/base/genericConfiguration.cpp:    return d->logFilesPaths;
modes/base/genericConfiguration.cpp:    return d->logFilesLevels;
modes/base/genericConfiguration.cpp:    d->logFilesPaths = logFilesPaths;
modes/base/genericConfiguration.cpp:    d->logFilesLevels = logFilesLevels;
modes/base/genericConfiguration.cpp:    if (d->logFilesPaths.size() != d->logFilesLevels.size()) {
modes/base/genericConfiguration.cpp:    QListIterator<QString> itString(d->logFilesPaths);
modes/base/genericConfiguration.cpp:    QListIterator<int> itInt(d->logFilesLevels);
modes/base/fileListHelper.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/logLevelFileList.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/logLevelFileList.cpp:    changeItem->setToolTip(i18n("Change the level of the current file(s)"));
modes/base/logLevelFileList.cpp:    changeItem->setWhatsThis(i18n(
modes/base/logLevelFileList.cpp:    buttonsLayout()->insertWidget(2, changeItem);
modes/base/logLevelFileList.cpp:    fileList->insertAction(fileList->actions().at(2), action);
modes/base/logLevelFileList.cpp:    changeItem->setEnabled(false);
modes/base/logLevelFileList.cpp:    QListWidgetItem *item = new QListWidgetItem(QIcon(level->pixmap()), itemText, fileList);
modes/base/logLevelFileList.cpp:        item->setForeground(Qt::red);
modes/base/logLevelFileList.cpp:    item->setData(LogLevelFileList::LogLevelRole, level->id());
modes/base/logLevelFileList.cpp:    if (fileList->selectedItems().count() > 0)
modes/base/logLevelFileList.cpp:        changeItem->setEnabled(true);
modes/base/logLevelFileList.cpp:        changeItem->setEnabled(false);
modes/base/logLevelFileList.cpp:        logLevels->addItem(new QListWidgetItem(QIcon(level->pixmap()), level->name()));
modes/base/logLevelFileList.cpp:        QList<QListWidgetItem *> selectedLogLevels = logLevels->selectedItems();
modes/base/logLevelFileList.cpp:            int selectedLogLevel = logLevels->row(logLevel);
modes/base/logLevelFileList.cpp:            QList<QListWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/logLevelFileList.cpp:                item->setIcon(logLevel->icon());
modes/base/logLevelFileList.cpp:                item->setData(LogLevelFileList::LogLevelRole, selectedLogLevel);
modes/base/logLevelFileList.cpp:        fileList->item(i)->data(LogLevelFileList::LogLevelRole).toInt());
modes/base/logLevelFileList.cpp:    int count = fileList->count();
modes/base/logLevelFileList.cpp:        levels.append(this->level(i)->id());
modes/base/logLevelFileList.cpp:    warningBox->setVisible(missingFiles);
modes/base/fileList.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/fileList.cpp:    warningBox->setVisible(false);
modes/base/fileList.cpp:    warningBox->setMessageType(KMessageWidget::Warning);
modes/base/fileList.cpp:    warningBox->setText(i18n("Some log files do not exist.\n"
modes/base/fileList.cpp:    warningBox->setCloseButtonVisible(false);
modes/base/fileList.cpp:    warningBox->setIcon(QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/warning.svg")));
modes/base/fileList.cpp:    vboxLayout->insertWidget(1, warningBox);
modes/base/fileList.cpp:    description->setText(descriptionText);
modes/base/fileList.cpp:    fileListHelper.prepareButton(add, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/new.svg")), this, SLOT(addItem()),
modes/base/fileList.cpp:    fileListHelper.prepareButton(modify, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/open.svg")), this,
modes/base/fileList.cpp:    separator->setSeparator(true);
modes/base/fileList.cpp:    fileList->addAction(separator);
modes/base/fileList.cpp:    fileListHelper.prepareButton(remove, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/symbolic.svg")), this,
modes/base/fileList.cpp:    fileListHelper.prepareButton(up, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/up.svg")), this, SLOT(moveUpItem()),
modes/base/fileList.cpp:    fileListHelper.prepareButton(down, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/down.svg")), this, SLOT(moveDownItem()),
modes/base/fileList.cpp:    fileListHelper.prepareButton(removeAll, QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/empty.png")), this,
modes/base/fileList.cpp:    return fileList->count();
modes/base/fileList.cpp:    return (fileList->count() == 0);
modes/base/fileList.cpp:        fileList->addItem(path);
modes/base/fileList.cpp:    modifyItem(fileList->item(fileList->currentRow()));
modes/base/fileList.cpp:    QString previousPath = item->text();
modes/base/fileList.cpp:        item->setText(paths.at(0));
modes/base/fileList.cpp:    QList<QListWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/fileList.cpp:        delete fileList->takeItem(fileList->row(item));
modes/base/fileList.cpp:    // fileList->setCurrentRow(fileList->count()-1);
modes/base/fileList.cpp:    QList<QListWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/fileList.cpp:        item->setSelected(false);
modes/base/fileList.cpp:    QList<QListWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/fileList.cpp:    int itemIndex = fileList->row(item);
modes/base/fileList.cpp:    fileList->takeItem(itemIndex);
modes/base/fileList.cpp:    fileList->insertItem(itemIndex + direction, item);
modes/base/fileList.cpp:    fileList->setCurrentRow(fileList->row(item));
modes/base/fileList.cpp:    moveItem(-1);
modes/base/fileList.cpp:    fileList->clear();
modes/base/fileList.cpp:    if (fileList->count() == 0)
modes/base/fileList.cpp:    QList<QListWidgetItem *> selectedItems = fileList->selectedItems();
modes/base/fileList.cpp:        if (fileList->row(selection) == 0)
modes/base/fileList.cpp:        if (fileList->row(selection) == fileList->count() - 1)
modes/base/fileList.cpp:            item->setForeground(Qt::red);
modes/base/fileList.cpp:        fileList->addItem(item);
modes/base/fileList.cpp:    warningBox->setVisible(missingFiles);
modes/base/fileList.cpp:    for (int i = 0; i < fileList->count(); i++) {
modes/base/fileList.cpp:        paths.append(fileList->item(i)->text());
modes/base/parsingHelper.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/genericConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/logLevelFileList.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/syslogAnalyzer2.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/base/syslogAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaFactory.cpp:    if (!logMode->filesExist())
modes/nvidia/nvidiaFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/nvidia/nvidiaConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaConfigurationWidget.h:        this->setLayout(layout);
modes/nvidia/nvidiaConfigurationWidget.h:        layout->addWidget(fileList);
modes/nvidia/nvidiaConfigurationWidget.h:                                                       ->logModeConfiguration<NvidiaConfiguration *>();
modes/nvidia/nvidiaConfigurationWidget.h:        nvidiaConfiguration->setNvidiaPaths(fileList->paths());
modes/nvidia/nvidiaConfigurationWidget.h:                                                       ->logModeConfiguration<NvidiaConfiguration *>();
modes/nvidia/nvidiaConfigurationWidget.h:        fileList->removeAllItems();
modes/nvidia/nvidiaConfigurationWidget.h:        fileList->addPaths(nvidiaConfiguration->nvidiaPaths());
modes/nvidia/nvidiaConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/nvidia/nvidiaLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaLogMode.h:#define NVIDIA_MODE_ICON "/usr/local/share/icons/logavista/settings.svg"
modes/nvidia/nvidiaConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("NvidiaLogMode"));
modes/nvidia/nvidiaConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/ddm.log.* | head -n 2 \"";
modes/nvidia/nvidiaConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->nvidiaPaths, defaultNvidiaPaths,
modes/nvidia/nvidiaConfiguration.h:    QStringList nvidiaPaths() const { return d->nvidiaPaths; }
modes/nvidia/nvidiaConfiguration.h:    void setNvidiaPaths(const QStringList &nvidiaPaths) { d->nvidiaPaths = nvidiaPaths; }
modes/nvidia/nvidiaFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaLogMode.cpp:    d->logModeConfiguration = QSharedPointer<NvidiaConfiguration>(new NvidiaConfiguration());
modes/nvidia/nvidiaLogMode.cpp:    d->logModeConfigurationWidget = new NvidiaConfigurationWidget();
modes/nvidia/nvidiaLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/nvidia/nvidiaLogMode.cpp:    d->action = createDefaultAction();
modes/nvidia/nvidiaLogMode.cpp:    d->action->setToolTip(i18n("Nvidia log /var/log/ddm.log"));
modes/nvidia/nvidiaLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/nvidia/nvidiaLogMode.cpp:    checkLogFilesPresence(configuration->nvidiaPaths());
modes/nvidia/nvidiaLogMode.cpp:    return configuration->findGenericLogFiles(configuration->nvidiaPaths());
modes/nvidia/nvidiaConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/nvidia/nvidiaConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesFactory.cpp:    if (!logMode->filesExist())
modes/alternatives/alternativesFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/alternatives/alternativesLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesLogMode.cpp:    d->logModeConfiguration = QSharedPointer<AlternativesConfiguration>(new AlternativesConfiguration());
modes/alternatives/alternativesLogMode.cpp:    d->logModeConfigurationWidget = new AlternativesConfigurationWidget();
modes/alternatives/alternativesLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/alternatives/alternativesLogMode.cpp:    d->action = createDefaultAction();
modes/alternatives/alternativesLogMode.cpp:    d->action->setToolTip(i18n("Display /var/log/alternatives*"));
modes/alternatives/alternativesLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/alternatives/alternativesLogMode.cpp:       "install several versions of a particular application, library, or utility, then switch which one will be used on a system-wide basis."
modes/alternatives/alternativesLogMode.cpp:    checkLogFilesPresence(configuration->alternativesPaths());
modes/alternatives/alternativesLogMode.cpp:    return configuration->findGenericLogFiles(configuration->alternativesPaths());
modes/alternatives/alternativesConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesConfigurationWidget.h:        this->setLayout(layout);
modes/alternatives/alternativesConfigurationWidget.h:        layout->addWidget(fileList);
modes/alternatives/alternativesConfigurationWidget.h:                                                       ->logModeConfiguration<AlternativesConfiguration *>();
modes/alternatives/alternativesConfigurationWidget.h:        alternativesConfiguration->setAlternativesPaths(fileList->paths());
modes/alternatives/alternativesConfigurationWidget.h:                                                       ->logModeConfiguration<AlternativesConfiguration *>();
modes/alternatives/alternativesConfigurationWidget.h:        fileList->removeAllItems();
modes/alternatives/alternativesConfigurationWidget.h:        fileList->addPaths(alternativesConfiguration->alternativesPaths());
modes/alternatives/alternativesConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/alternatives/alternativesConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("AlternativesLogMode"));
modes/alternatives/alternativesConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/alternatives.log.* | head -n 5 \"";
modes/alternatives/alternativesConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->alternativesPaths, defaultAlternativesPaths,
modes/alternatives/alternativesConfiguration.h:    QStringList alternativesPaths() const { return d->alternativesPaths; }
modes/alternatives/alternativesConfiguration.h:    void setAlternativesPaths(const QStringList &alternativesPaths) { d->alternativesPaths = alternativesPaths; }
modes/alternatives/alternativesFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/alternatives/alternativesConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("LightdmLogMode"));
modes/lightdm/lightdmConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->lightdmPaths, defaultLightdmPaths,
modes/lightdm/lightdmConfiguration.h:    QStringList lightdmPaths() const { return d->lightdmPaths; }
modes/lightdm/lightdmConfiguration.h:    void setLightdmPaths(const QStringList &lightdmPaths) { d->lightdmPaths = lightdmPaths; }
modes/lightdm/lightdmConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmConfigurationWidget.h:        this->setLayout(layout);
modes/lightdm/lightdmConfigurationWidget.h:        layout->addWidget(fileList);
modes/lightdm/lightdmConfigurationWidget.h:                                                       ->logModeConfiguration<LightdmConfiguration *>();
modes/lightdm/lightdmConfigurationWidget.h:        lightdmConfiguration->setLightdmPaths(fileList->paths());
modes/lightdm/lightdmConfigurationWidget.h:                                                       ->logModeConfiguration<LightdmConfiguration *>();
modes/lightdm/lightdmConfigurationWidget.h:        fileList->removeAllItems();
modes/lightdm/lightdmConfigurationWidget.h:        fileList->addPaths(lightdmConfiguration->lightdmPaths());
modes/lightdm/lightdmConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/lightdm/lightdmLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmLogMode.cpp:    d->logModeConfiguration = QSharedPointer<LightdmConfiguration>(new LightdmConfiguration());
modes/lightdm/lightdmLogMode.cpp:    d->logModeConfigurationWidget = new LightdmConfigurationWidget();
modes/lightdm/lightdmLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/lightdm/lightdmLogMode.cpp:    d->action = createDefaultAction();
modes/lightdm/lightdmLogMode.cpp:    d->action->setToolTip(i18n("Login Screen issues: /var/log/lightdm.log"));
modes/lightdm/lightdmLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/lightdm/lightdmLogMode.cpp:    checkLogFilesPresence(configuration->lightdmPaths());
modes/lightdm/lightdmLogMode.cpp:    return configuration->findGenericLogFiles(configuration->lightdmPaths());
modes/lightdm/lightdmFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmFactory.cpp:    if (!logMode->filesExist())
modes/lightdm/lightdmFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/lightdm/lightdmFactory.cpp:     logModeAction->setCategory(LogModeAction::OthersCategory);
modes/lightdm/lightdmConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/lightdm/lightdmLogMode.h:#define LIGHTDM_MODE_ICON "/usr/share/icons/hicolor/scalable/apps/lightdm-gtk-greeter-settings"
modes/postfix/postfixConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixAnalyzer.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixAnalyzer.h:        QStringList items = syslogLine->logItems();
modes/postfix/postfixAnalyzer.h:  logDebug() << "Coucou" << items.at(items.count()-1);
modes/postfix/postfixAnalyzer.h:        syslogLine->setLogItems(items);
modes/postfix/postfixLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixLogMode.cpp:    d->logModeConfiguration = QSharedPointer<PostfixConfiguration>(new PostfixConfiguration());
modes/postfix/postfixLogMode.cpp:    d->logModeConfigurationWidget = new PostfixConfigurationWidget();
modes/postfix/postfixLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/postfix/postfixLogMode.cpp:    d->action = createDefaultAction();
modes/postfix/postfixLogMode.cpp:    d->action->setToolTip(i18n("Display the Mail log."));
modes/postfix/postfixLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/postfix/postfixLogMode.cpp:    checkLogFilesPresence(logModeConfiguration<PostfixConfiguration *>()->logFilesPaths());
modes/postfix/postfixLogMode.cpp:    return logModeConfiguration<PostfixConfiguration *>()->findGenericLogFiles();
modes/postfix/postfixFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixFactory.cpp:    if (!logMode->filesExist())
modes/postfix/postfixFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/postfix/postfixFactory.cpp:    logModeAction->setCategory(LogModeAction::ServicesCategory);
modes/postfix/postfixAnalyzer.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixConfigurationWidget.h:        this->setLayout(layout);
modes/postfix/postfixConfigurationWidget.h:        layout->addWidget(fileList);
modes/postfix/postfixConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/postfix/postfixConfigurationWidget.h:                                                  ->logModeConfiguration<PostfixConfiguration *>();
modes/postfix/postfixConfigurationWidget.h:        configuration->setLogFilesPaths(fileList->paths());
modes/postfix/postfixConfigurationWidget.h:        configuration->setLogFilesLevels(fileList->levels());
modes/postfix/postfixConfigurationWidget.h:                                                  ->logModeConfiguration<PostfixConfiguration *>();
modes/postfix/postfixConfigurationWidget.h:        fileList->removeAllItems();
modes/postfix/postfixConfigurationWidget.h:        fileList->addPaths(configuration->logFilesPaths(), configuration->logFilesLevels());
modes/postfix/postfixFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/postfix/postfixLogMode.h:#define POSTFIX_MODE_ICON "/usr/local/share/icons/logavista/mail.svg"
modes/tiger/tigerConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerLogMode.cpp:    d->logModeConfiguration = QSharedPointer<TigerConfiguration>(new TigerConfiguration());
modes/tiger/tigerLogMode.cpp:    d->logModeConfigurationWidget = new TigerConfigurationWidget();
modes/tiger/tigerLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/tiger/tigerLogMode.cpp:    d->action = createDefaultAction();
modes/tiger/tigerLogMode.cpp:    d->action->setToolTip(i18n("Tiger security audit logs /var/log/tiger/security.report.*"));
modes/tiger/tigerLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/tiger/tigerLogMode.cpp:    checkLogFilesPresence(configuration->tigerPaths());
modes/tiger/tigerLogMode.cpp:    return configuration->findGenericLogFiles(configuration->tigerPaths());
modes/tiger/tigerFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerFactory.cpp:    if (!logMode->filesExist())
modes/tiger/tigerFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/tiger/tigerConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("TigerLogMode"));
modes/tiger/tigerConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/tiger/security.report.* | head -n 1 \"";
modes/tiger/tigerConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->tigerPaths, defaultTigerPaths,
modes/tiger/tigerConfiguration.h:    QStringList tigerPaths() const { return d->tigerPaths; }
modes/tiger/tigerConfiguration.h:    void setTigerPaths(const QStringList &tigerPaths) { d->tigerPaths = tigerPaths; }
modes/tiger/tigerConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/tiger/tigerConfigurationWidget.h:        this->setLayout(layout);
modes/tiger/tigerConfigurationWidget.h:        layout->addWidget(fileList);
modes/tiger/tigerConfigurationWidget.h:                                                       ->logModeConfiguration<TigerConfiguration *>();
modes/tiger/tigerConfigurationWidget.h:        tigerConfiguration->setTigerPaths(fileList->paths());
modes/tiger/tigerConfigurationWidget.h:                                                       ->logModeConfiguration<TigerConfiguration *>();
modes/tiger/tigerConfigurationWidget.h:        fileList->removeAllItems();
modes/tiger/tigerConfigurationWidget.h:        fileList->addPaths(tigerConfiguration->tigerPaths());
modes/tiger/tigerConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/teamviewer/teamviewerConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerConfigurationWidget.h:        this->setLayout(layout);
modes/teamviewer/teamviewerConfigurationWidget.h:        layout->addWidget(fileList);
modes/teamviewer/teamviewerConfigurationWidget.h:                                                       ->logModeConfiguration<TeamviewerConfiguration *>();
modes/teamviewer/teamviewerConfigurationWidget.h:        teamviewerConfiguration->setTeamviewerPaths(fileList->paths());
modes/teamviewer/teamviewerConfigurationWidget.h:                                                       ->logModeConfiguration<TeamviewerConfiguration *>();
modes/teamviewer/teamviewerConfigurationWidget.h:        fileList->removeAllItems();
modes/teamviewer/teamviewerConfigurationWidget.h:        fileList->addPaths(teamviewerConfiguration->teamviewerPaths());
modes/teamviewer/teamviewerConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/teamviewer/teamviewerConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("TeamviewerLogMode"));
modes/teamviewer/teamviewerConfiguration.h:        // QString Command = "/bin/bash -c \"ls -t /var/log/teamviewer*/TeamViewer*_Logfile.log | head \"";
modes/teamviewer/teamviewerConfiguration.h:        QString Command = "/bin/bash -c \"find -L /var/log/teamviewer* -name '*_*.log' -print \"";
modes/teamviewer/teamviewerConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->teamviewerPaths, defaultTeamviewerPaths,
modes/teamviewer/teamviewerConfiguration.h:    QStringList teamviewerPaths() const { return d->teamviewerPaths; }
modes/teamviewer/teamviewerConfiguration.h:    void setTeamviewerPaths(const QStringList &teamviewerPaths) { d->teamviewerPaths = teamviewerPaths; }
modes/teamviewer/teamviewerConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerLogMode.cpp:    d->logModeConfiguration = QSharedPointer<TeamviewerConfiguration>(new TeamviewerConfiguration());
modes/teamviewer/teamviewerLogMode.cpp:    d->logModeConfigurationWidget = new TeamviewerConfigurationWidget();
modes/teamviewer/teamviewerLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/teamviewer/teamviewerLogMode.cpp:    d->action = createDefaultAction();
modes/teamviewer/teamviewerLogMode.cpp:    d->action->setToolTip(i18n("Teamviewer log /var/log/TeamViewer*.log*"));
modes/teamviewer/teamviewerLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/teamviewer/teamviewerLogMode.cpp:    checkLogFilesPresence(configuration->teamviewerPaths());
modes/teamviewer/teamviewerLogMode.cpp:    return configuration->findGenericLogFiles(configuration->teamviewerPaths());
modes/teamviewer/teamviewerLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerFactory.cpp:    if (!logMode->filesExist())
modes/teamviewer/teamviewerFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/teamviewer/teamviewerFactory.cpp:    logModeAction->setCategory(LogModeAction::OthersCategory);
modes/teamviewer/teamviewerConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/teamviewer/teamviewerFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairFactory.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairFactory.cpp:    if (!logMode->filesExist())
modes/mx_boot_repair/mx_boot_repairFactory.cpp:    SimpleAction *logModeAction = new SimpleAction(logMode->action(), logMode);
modes/mx_boot_repair/mx_boot_repairFactory.cpp:     logModeAction->setCategory(LogModeAction::MX_LinuxCategory);
modes/mx_boot_repair/mx_boot_repairConfiguration.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairConfiguration.h:        configuration->setCurrentGroup(QStringLiteral("Mx_boot_repairLogMode"));
modes/mx_boot_repair/mx_boot_repairConfiguration.h:        QString Command = "/bin/bash -c \"ls -t /var/log/mx_boot_repair* | head  \"";
modes/mx_boot_repair/mx_boot_repairConfiguration.h:        configuration->addItemStringList(QStringLiteral("LogFilesPaths"), d->mx_boot_repairPaths, defaultMx_boot_repairPaths,
modes/mx_boot_repair/mx_boot_repairConfiguration.h:    QStringList mx_boot_repairPaths() const { return d->mx_boot_repairPaths; }
modes/mx_boot_repair/mx_boot_repairConfiguration.h:    void setMx_boot_repairPaths(const QStringList &mx_boot_repairPaths) { d->mx_boot_repairPaths = mx_boot_repairPaths; }
modes/mx_boot_repair/mx_boot_repairLogMode.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairLogMode.h:#define MX_BOOT_REPAIR_MODE_ICON "/usr/local/share/icons/logavista/repair.svg"
modes/mx_boot_repair/mx_boot_repairLogMode.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->logModeConfiguration = QSharedPointer<Mx_boot_repairConfiguration>(new Mx_boot_repairConfiguration());
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->logModeConfigurationWidget = new Mx_boot_repairConfigurationWidget();
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->itemBuilder = new LogModeItemBuilder();
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->action = createDefaultAction();
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->action->setToolTip(i18n("Mx_boot_repair logs /var/log/mx_boot_repair*"));
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    d->action->setWhatsThis(i18n(
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    checkLogFilesPresence(configuration->mx_boot_repairPaths());
modes/mx_boot_repair/mx_boot_repairLogMode.cpp:    return configuration->findGenericLogFiles(configuration->mx_boot_repairPaths());
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        this->setLayout(layout);
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        layout->addWidget(fileList);
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_boot_repairConfiguration *>();
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        mx_boot_repairConfiguration->setMx_boot_repairPaths(fileList->paths());
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:                                                       ->logModeConfiguration<Mx_boot_repairConfiguration *>();
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        fileList->removeAllItems();
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        fileList->addPaths(mx_boot_repairConfiguration->mx_boot_repairPaths());
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.h:        if (fileList->isEmpty() == false) {
modes/mx_boot_repair/mx_boot_repairConfigurationWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairConfiguration.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
modes/mx_boot_repair/mx_boot_repairFactory.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
org.kde.ksystemlog.desktop:Exec=ksystemlog -qwindowtitle %c
org.kde.ksystemlog.desktop:Icon=utilities-log-viewer
org.kde.ksystemlog.desktop:X-DocPath=ksystemlog/index.html
org.kde.ksystemlog.desktop:X-KDE-SubstituteUID=true
org.kde.ksystemlog.desktop:Name[hne]=के-सिस्टम-लाग
org.kde.ksystemlog.desktop:Name[hu]=Rendszernapló-megjelenítő
org.kde.ksystemlog.desktop:Name[mr]=के-सिस्टीम-लॉग
org.kde.ksystemlog.desktop:Name[pa]=ਕੇ-ਸਿਸਟਮ-ਲਾਗ
org.kde.ksystemlog.desktop:Name[sr]=К‑системски-дневник
org.kde.ksystemlog.desktop:Name[sr@ijekavian]=К‑системски-дневник
org.kde.ksystemlog.desktop:Name[sr@ijekavianlatin]=K‑sistemski-dnevnik
org.kde.ksystemlog.desktop:Name[sr@latin]=K‑sistemski-dnevnik
org.kde.ksystemlog.desktop:Name[x-test]=xxKSystemLogxx
org.kde.ksystemlog.desktop:Comment[hu]=Rendszernapló-megjelenítő eszköz
org.kde.ksystemlog.desktop:Comment[nds]=Kieker för Systeem-Logböker
org.kde.ksystemlog.desktop:Comment[x-test]=xxSystem log viewer toolxx
org.kde.ksystemlog.desktop:GenericName[de]=Systemprotokoll-Betrachter
org.kde.ksystemlog.desktop:GenericName[hu]=Rendszernapló-megjelenítő
org.kde.ksystemlog.desktop:GenericName[nl]=Systeemlog-weergaveprogramma
org.kde.ksystemlog.desktop:GenericName[x-test]=xxSystem Log Viewerxx
statusBar.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
statusBar.cpp:    d->lineCountLabel = new QLabel(QLatin1String(""), this);
statusBar.cpp:    d->lineCountLabel->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
statusBar.cpp:    d->lineCountLabel->setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
statusBar.cpp:    d->lineCountLabel->setLineWidth(2);
statusBar.cpp:    d->lineCountLabel->setMidLineWidth(2);
statusBar.cpp:    addPermanentWidget(d->lineCountLabel, 1);
statusBar.cpp:    d->toggleHistory = new QPushButton(this);
statusBar.cpp:    d->toggleHistory->setIcon(QIcon::fromTheme( QLatin1String( "/usr/local/share/icons/logavista/history.svg" )));
statusBar.cpp:    d->toggleHistory->setFlat(true);
statusBar.cpp:    addPermanentWidget(d->toggleHistory, 0);
statusBar.cpp:    connect(d->toggleHistory, SIGNAL(clicked()), this, SLOT(toggleHistory()));
statusBar.cpp:        d->messageLabel = new KSqueezedTextLabel("", this);
statusBar.cpp:        d->messageLabel->setAlignment(Qt::AlignLeft);
statusBar.cpp:        d->messageLabel->setTextElideMode(Qt::ElideRight);
statusBar.cpp:        addPermanentWidget(d->messageLabel, 4);
statusBar.cpp:    d->messageList = new KComboBox(this);
statusBar.cpp:    d->messageList->setInsertPolicy(QComboBox::InsertAtTop);
statusBar.cpp:    d->messageList->setMaxVisibleItems(5);
statusBar.cpp:    connect(d->messageList, SIGNAL(currentIndexChanged(int)), this, SLOT(selectLastHistory()));
statusBar.cpp:        QPalette palette(d->messageList->palette());
statusBar.cpp:        d->messageList->setPalette(palette);
statusBar.cpp:        //d->messageList->repaint();
statusBar.cpp:    addPermanentWidget(d->messageList, 4);
statusBar.cpp:    d->lastModificationLabel = new QLabel(QLatin1String(""), this);
statusBar.cpp:    d->lastModificationLabel->setAlignment(Qt::AlignRight | Qt::AlignVCenter);
statusBar.cpp:    d->lastModificationLabel->setFrameStyle(QFrame::StyledPanel | QFrame::Sunken);
statusBar.cpp:    d->lastModificationLabel->setLineWidth(2);
statusBar.cpp:    d->lastModificationLabel->setMidLineWidth(2);
statusBar.cpp:    addPermanentWidget(d->lastModificationLabel, 1);
statusBar.cpp:    d->lineCountLabel->setText(lineCountMessage);
statusBar.cpp:    // d->lastModificationLabel->setText(i18n("Last updated: %1.",
statusBar.cpp:    // KLocale::global()->formatTime(lastModification, true, false) ));
statusBar.cpp:    d->lastModificationLabel->setText(
statusBar.cpp:    // d->messageLabel->setText(message);
statusBar.cpp:    // d->messageList->insertItem(0, i18n("%1: %2", KLocale::global()->formatTime(QTime::currentTime(), true,
statusBar.cpp:    d->messageList->insertItem(
statusBar.cpp:    if (d->messageList->count() > 100) {
statusBar.cpp:        d->messageList->removeItem(d->messageList->count() - 1);
statusBar.cpp:    d->messageList->setCurrentIndex(0);
statusBar.cpp:    d->messageList->showPopup();
statusBar.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
tabLogManager.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
tabLogManager.cpp:    d->logManager = logManager;
tabLogManager.cpp:    d->newLinesCount = 0;
tabLogManager.cpp:    delete d->logManager->usedView();
tabLogManager.cpp:    delete d->logManager;
tabLogManager.cpp:    return d->logManager;
tabLogManager.cpp:    d->newLinesCount += newLines;
tabLogManager.cpp:    d->newLinesCount = 0;
tabLogManager.cpp:    if (d->newLinesCount == 0)
tabLogManager.cpp:        return i18nc("Log mode name (added lines count)", "%1 (%2)", d->logManager->title(),
tabLogManager.cpp:                     d->newLinesCount);
tabLogManager.cpp:    if (d->logManager->logMode() == NULL)
tabLogManager.cpp:        return d->logManager->title();
tabLogManager.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
tabLogViewsWidget.cpp: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
tabLogViewsWidget.cpp:    d->contextMenu = NULL;
tabLogViewsWidget.cpp:        = new QPushButton(DesktopIcon(QStringLiteral("/usr/local/share/icons/logavista/new.svg")), QLatin1String(""), this);
tabLogViewsWidget.cpp:    //tabNewTabButton->setBaseSize(32,32);
tabLogViewsWidget.cpp:    //tabNewTabButton->setIconSize(48,48);
tabLogViewsWidget.cpp:    tabNewTabButton->setToolTip(i18n("Create a new tab"));
tabLogViewsWidget.cpp:    tabNewTabButton->setWhatsThis(i18n("Creates a new tab which can display another log."));
tabLogViewsWidget.cpp:        = new QPushButton(DesktopIcon(QStringLiteral("/usr/local/share/icons/logavista/other.svg")), QLatin1String(""), this);
tabLogViewsWidget.cpp:    //tabCloseTabButton->setBaseSize(32,32);
tabLogViewsWidget.cpp:    tabCloseTabButton->setToolTip(i18n("Close the current tab"));
tabLogViewsWidget.cpp:    tabCloseTabButton->setWhatsThis(i18n("Closes the current tab."));
tabLogViewsWidget.cpp:    QList<TabLogManager *> copy = d->tabLogManagers;
tabLogViewsWidget.cpp:        d->tabLogManagers.removeAll(tabLogManager);
tabLogViewsWidget.cpp:        tabBar()->show();
tabLogViewsWidget.cpp:        tabBar()->hide();
tabLogViewsWidget.cpp:    foreach (TabLogManager *tabLogManager, d->tabLogManagers) {
tabLogViewsWidget.cpp:        logManagers.append(tabLogManager->logManager());
tabLogViewsWidget.cpp:    return findRelatedTabLogManager(view)->logManager();
tabLogViewsWidget.cpp:    foreach (TabLogManager *tabLogManager, d->tabLogManagers) {
tabLogViewsWidget.cpp:        if (tabLogManager->logManager()->usedView() == view) {
tabLogViewsWidget.cpp:        return tabLogManager->logManager();
tabLogViewsWidget.cpp:    return newTabLogManager()->logManager();
tabLogViewsWidget.cpp:    int position = indexOf(currentTabLogManager->logManager()->usedView());
tabLogViewsWidget.cpp:    d->tabLogManagers.removeAt(position);
tabLogViewsWidget.cpp:    d->tabLogManagers.insert(position - 1, currentTabLogManager);
tabLogViewsWidget.cpp:    tabBar()->moveTab(position, position - 1);
tabLogViewsWidget.cpp:    int position = indexOf(currentTabLogManager->logManager()->usedView());
tabLogViewsWidget.cpp:    if (position >= count() - 1) {
tabLogViewsWidget.cpp:        logCritical() << "Tab Position >= count()-1 : " << position;
tabLogViewsWidget.cpp:    d->tabLogManagers.removeAt(position);
tabLogViewsWidget.cpp:    d->tabLogManagers.insert(position + 1, currentTabLogManager);
tabLogViewsWidget.cpp:    tabBar()->moveTab(position, position + 1);
tabLogViewsWidget.cpp:    LogMode *mode = currentManager->logManager()->logMode();
tabLogViewsWidget.cpp:    load(mode, tabLogManager->logManager());
tabLogViewsWidget.cpp:    return tabLogManager->logManager();
tabLogViewsWidget.cpp:    d->tabLogManagers.append(tabLogManager);
tabLogViewsWidget.cpp:    setCurrentIndex(count() - 1);
tabLogViewsWidget.cpp:    view->logViewWidget()->setFocus();
tabLogViewsWidget.cpp:    d->tabLogManagers.removeAll(currentTabLogManager);
tabLogViewsWidget.cpp:    removeTab(indexOf(currentTabLogManager->logManager()->usedView()));
tabLogViewsWidget.cpp:        tabBar()->hide();
tabLogViewsWidget.cpp:    logDebug() << "Loading a new mode : " << logMode->name();
tabLogViewsWidget.cpp:    manager->initialize(logMode, analyzerOptions);
tabLogViewsWidget.cpp:    manager->reload();
tabLogViewsWidget.cpp:        manager->reload();
tabLogViewsWidget.cpp:    foreach (TabLogManager *tabLogManager, d->tabLogManagers) {
tabLogViewsWidget.cpp:        if (tabLogManager->logManager()->logMode() == NULL) {
tabLogViewsWidget.cpp:        if (tabLogManager->logManager()->logMode()->id() == QLatin1String("openLogMode")) {
tabLogViewsWidget.cpp:            tabLogManager->logManager()->reload();
tabLogViewsWidget.cpp:        load(tabLogManager->logManager()->logMode(), tabLogManager->logManager(),
tabLogViewsWidget.cpp:             tabLogManager->logManager()->analyzerOptions());
tabLogViewsWidget.cpp:    if (index == -1)
tabLogViewsWidget.cpp:    tabLogManager->initNewLinesCount();
tabLogViewsWidget.cpp:    changeTab(tabLogManager->logManager()->usedView(), logModeIcon(tabLogManager->logManager()->logMode()),
tabLogViewsWidget.cpp:              tabLogManager->title());
tabLogViewsWidget.cpp:        changeTab(tabLogManager->logManager()->usedView(), QIcon::fromTheme(QStringLiteral("/usr/local/share/icons/logavista/refresh.svg")),
tabLogViewsWidget.cpp:                  tabLogManager->title());
tabLogViewsWidget.cpp:        changeTab(tabLogManager->logManager()->usedView(),
tabLogViewsWidget.cpp:                  logModeIcon(tabLogManager->logManager()->logMode()), tabLogManager->title());
tabLogViewsWidget.cpp:    if (currentManager->usedView() != view) {
tabLogViewsWidget.cpp:        tabLogManager->addNewLinesCount(addedLinesSinceLastUpdate);
tabLogViewsWidget.cpp:        changeTab(tabLogManager->logManager()->usedView(),
tabLogViewsWidget.cpp:                  logModeIcon(tabLogManager->logManager()->logMode()), tabLogManager->title());
tabLogViewsWidget.cpp:    activeLogManager()->usedView()->logViewWidget()->expandAll();
tabLogViewsWidget.cpp:    activeLogManager()->usedView()->logViewWidget()->collapseAll();
tabLogViewsWidget.cpp:    activeLogManager()->usedView()->logViewWidget()->selectAll();
tabLogViewsWidget.cpp:    LogViewExport logViewExport(this, activeLogManager()->usedView()->logViewWidget());
tabLogViewsWidget.cpp:    LogViewExport logViewExport(this, activeLogManager()->usedView()->logViewWidget());
tabLogViewsWidget.cpp:    LogViewExport logViewExport(this, activeLogManager()->usedView()->logViewWidget());
tabLogViewsWidget.cpp:    LogViewExport logViewExport(this, activeLogManager()->usedView()->logViewWidget());
tabLogViewsWidget.cpp:        return logMode->icon();
tabLogViewsWidget.cpp:    if (d->contextMenu == NULL) {
tabLogViewsWidget.cpp:        d->contextMenu = new QMenu(this);
tabLogViewsWidget.cpp:        d->contextMenu->addActions(actions());
tabLogViewsWidget.cpp:    d->contextMenu->popup(cursorPosition);
tabLogViewsWidget.cpp:    logDebug() << "Showing context menu at " << cursorPosition << " at " << tab->objectName();
tabLogViewsWidget.cpp:    d->contextMenu->popup(cursorPosition);
tabLogViewsWidget.h: *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.          *
